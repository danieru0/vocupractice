{"version":3,"sources":["helpers/generateRandomId.tsx","helpers/localStorageHandler.tsx","helpers/showNotification.tsx","features/vocabulary/vocabularySlice.ts","theme/theme.tsx","components/atoms/Button.tsx","components/organisms/EmptyCategories.tsx","features/vocupractice/vocupracticeSlice.ts","components/atoms/CategoryBlock.tsx","components/atoms/Checkbox.tsx","components/organisms/FullCategories.tsx","components/atoms/PageTitle.tsx","components/molecules/Title.tsx","pages/Categories.tsx","components/atoms/Input.tsx","components/molecules/AddCategory.tsx","pages/CategoryForm.tsx","helpers/findWordById.tsx","components/organisms/AddEditWordForm.tsx","pages/WordForm.tsx","features/modal/modalSlice.tsx","hooks/useAfterUserType.tsx","components/atoms/ButtonIcon.tsx","components/atoms/TableRow.tsx","components/molecules/WordsTable.tsx","components/molecules/ScrollToTop.tsx","components/molecules/DropDownMenu.tsx","components/organisms/FullWords.tsx","components/organisms/EmptyWords.tsx","pages/Words.tsx","helpers/ifEqual.tsx","components/atoms/Radio.tsx","components/molecules/VocupracticeRadioBtn.tsx","components/organisms/Vocupractice.tsx","pages/Practice.tsx","pages/NoFound.tsx","components/molecules/Logo.tsx","components/molecules/ImportExportBtns.tsx","components/organisms/Headbar.tsx","components/molecules/ModalMove.tsx","components/organisms/ModalContainer.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme/GlobalStyles.tsx","index.tsx"],"names":["generateRandomId","Math","random","toString","substr","saveToLocalStorage","name","data","localStorage","setItem","JSON","stringify","loadFromLocalStorage","getItem","parse","undefined","showNotification","title","message","type","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","vocabularySlice","createSlice","initialState","categories","searchWords","reducers","loadVocabulary","state","action","payload","createCategory","randomId","id","words","current","createWord","categoryId","word","deleteCategory","deleteWord","wordId","notification","filter","item","updateWord","selectedWord","map","query","trim","length","foundWords","includes","translation","reading","setImportant","important","push","importantItem","moveWord","categoryIdFrom","categoryIdTo","actions","selectVocabulary","vocabulary","theme","fontColor","fontColorSecondary","primary","secondary","inputBackground","buttonBorder","importColor","exportColor","categoryBorder","deleteColor","checkBackground","editColor","fontSizeEm","primaryFont","secondaryFont","handleColorType","color","handleWidthType","width","ContainerButton","styled","button","backgroundcolor","darken","ContainerLink","Link","Button","backgroundColor","children","onClick","href","props","to","Container","div","EmptyCategories","vocupracticeSlice","selectedCategoriesId","loadVocupractice","setType","setReading","setCategoryId","setSelectedCategoriesId","setWord","selectVocupractice","vocupractice","StyledLink","CategoryBlock","label","Text","span","Input","input","Checkbox","onChange","checked","WrapperButtons","WrapperCategories","StyledButton","FullCategories","history","useHistory","dispatch","useDispatch","vocabularySelector","useSelector","useState","importantValue","setImportantValue","alert","isAnyCategoryEmpty","Object","keys","forEach","category","e","target","Title","size","PageTitle","WordsLengthContainer","WordsLength","Categories","Helmet","LabelText","ContainerInput","iconType","StyledFontAwesomeIcon","FontAwesomeIcon","forwardRef","ref","onKeyDown","value","labelText","placeholder","restProps","icon","form","AddCategory","onSubmit","categoryName","setCategoryName","preventDefault","CategoryForm","findWordById","AddEditWordForm","wordValue","setWordValue","translationValue","setTranslationValue","readingValue","setReadingValue","InputWordRef","useRef","useEffect","focus","WordForm","useParams","editData","setEditData","handleSubmit","charAt","toUpperCase","slice","modalSlice","currentCategoryId","active","setModalActiveState","selectModal","modal","useAfterUserType","setQuery","timeOut","setTimeout","clearTimeout","handleFontColorType","fontcolor","fontSize","ButtonIcon","Tr","tr","lighten","Td","td","weight","css","Wrapper","TableRow","onCheckClick","onDeleteClick","onMenuClick","data-tip","table","Body","tbody","WordsTable","onWordDeleteClick","onWordCheckClick","useMemo","shouldShow","ScrollToTop","shouldShowButton","setShouldShowButton","handleScroll","window","pageYOffset","document","addEventListener","removeEventListener","scrollTo","top","left","behavior","List","ul","ListItem","li","DropDownMenu","onImportantClick","onMoveClick","StyledInput","FullWords","onCategoryDeleteclick","containerRef","selectedWords","setSelectedWords","searchValue","setSearchValue","dropDownMenuShow","setDropDownMenuShow","dropdownMenuLeft","setDropdownMenuLeft","dropdownMenuTop","setDropdownMenuTop","dropdownMenuWord","setDropDownMenuWord","searchQuery","useHotkeys","handleAddWordShortcut","handleWordDelete","useCallback","confirm","handleCheckClick","handleOutsideClick","effect","stopPropagation","targetRect","currentTarget","getBoundingClientRect","offsetLeft","offsetTop","scrollY","innerWidth","EmptyWords","Words","handleCategoryDelete","ifEqual","value1","value2","toLocaleLowerCase","Radio","StyledRadio","VocupracticeRadioBtn","text","Word","Reading","isCorrect","column","StyledVocupracticeRadioBtn","Vocupractice","vocupracticeSelector","translationCorrect","setTranslationCorrect","readingCorrect","setReadingCorrect","allCorrect","setAllCorect","readingInputRef","translationInputRef","initNewWord","categoriesId","getState","vocubularyCategories","randomKey","floor","randomCategoryKey","randomCategory","randomWordKey","resetWord","handleTypeChange","key","Practice","practiceTitle","setPracticeTitle","Message","NoFound","Logo","isMobile","useMediaQuery","InputFile","StyledButtonIcon","ImportExportBtns","inputFileRef","handleImportClick","click","handleExportClick","file","Blob","element","createElement","URL","createObjectURL","download","files","reader","FileReader","onload","json","result","importantWordsArray","categoriesKeysToCompare","wordKeysToCompare","categoryKeys","Error","wordKeys","indexOf","splice","error","readAsText","accept","Headbar","SelectInput","select","SelectOption","option","ModalMove","modalSelector","selectValue","setSelectValue","ModalContainer","renderModal","library","add","faEdit","faTrash","faFileExport","faFileImport","faSearch","faArrowUp","faCaretDown","GlobalContainer","App","exact","path","configureStore","reducer","vocabularyReducer","vocupracticeReducer","modalReducer","Boolean","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyles","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a154979d.chunk.js","sourcesContent":["const generateRandomId = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport default generateRandomId;","export const saveToLocalStorage = (name: string, data: any) => {\r\n    localStorage.setItem(name, JSON.stringify(data));\r\n}\r\n\r\nexport const loadFromLocalStorage = (name: string) => {\r\n    return localStorage.getItem(name) \r\n        ? JSON.parse(localStorage.getItem(name)!)\r\n        : undefined;\r\n}","import { store } from 'react-notifications-component';\r\n\r\ntype notificationType = \"success\" | \"danger\" | \"info\" | \"default\" | \"warning\";\r\n\r\nconst showNotification = (title: string, message: string, type: notificationType) => {\r\n    store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"bottom\",\r\n        container: \"bottom-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 3000,\r\n          onScreen: true\r\n        }\r\n    })   \r\n}\r\n\r\nexport default showNotification;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport generateRandomId from '../../helpers/generateRandomId';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nexport interface Words {\r\n    id: string;\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n}\r\n\r\nexport interface Categories {\r\n    id: string;\r\n    name: string;\r\n    words: Words[]\r\n}\r\n\r\ninterface VocabularyState {\r\n    categories: {\r\n        [key: string]: Categories\r\n    },\r\n    searchWords: Words[];\r\n}\r\n\r\nexport const initialState: VocabularyState = {\r\n    categories: {},\r\n    searchWords: []\r\n}\r\n\r\nexport const vocabularySlice = createSlice({\r\n    name: 'vocubulary',\r\n    initialState,\r\n    reducers: {\r\n        loadVocabulary: (state, action: PayloadAction<any>) => {\r\n            state.categories = action.payload;\r\n        },\r\n        createCategory: (state, action: PayloadAction<string>) => {\r\n            const randomId = generateRandomId();\r\n            \r\n            state.categories[randomId] = {\r\n                id: randomId,\r\n                name: action.payload,\r\n                words: []\r\n            }\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been created!', 'success');\r\n        },\r\n        createWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            state.categories[categoryId].words = [...state.categories[categoryId].words, word];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been added!', 'success');\r\n        },\r\n        deleteCategory: (state, action: PayloadAction<string>) => {\r\n            delete state.categories[action.payload];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been deleted!', 'success');\r\n        },\r\n        deleteWord: (state, action: PayloadAction<{categoryId: string, wordId: string, notification: boolean}>) => {\r\n            const { categoryId, wordId, notification } = action.payload;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.filter((item) => {\r\n                return item.id !== wordId;\r\n            });\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            if (notification) {\r\n                showNotification('Success', 'Word has been deleted!', 'success');\r\n            }\r\n            \r\n        },\r\n        updateWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            const selectedWord = state.categories[categoryId].words.filter((item) => {\r\n                return item.id === word.id;\r\n            })[0] = word;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                return item.id === word.id ? selectedWord : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been updated!', 'success');\r\n        },\r\n        searchWords: (state, action: PayloadAction<{query: string, categoryId: string}>) => {\r\n            const { categoryId, query } = action.payload;\r\n\r\n            if (query.trim().length === 0) {\r\n                state.searchWords = [];\r\n            } else {\r\n                const foundWords = state.categories[categoryId].words.filter((item) => {\r\n                    return item.word.includes(query) || item.translation.includes(query) || item.reading?.includes(query);\r\n                });\r\n    \r\n                state.searchWords = foundWords;\r\n            }\r\n        },\r\n        setImportant: (state, action: PayloadAction<{categoryId: string, wordId: string, important: boolean}>) => {\r\n            const { categoryId, wordId, important } = action.payload;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                if (item.id === wordId) {\r\n                    if (important) {\r\n                        state.categories['importantWords'].words.push(item);\r\n                    } else {\r\n                        state.categories['importantWords'].words = state.categories['importantWords'].words.filter((importantItem) => {\r\n                            return importantItem.id !== wordId;\r\n                        })\r\n                    }\r\n                }\r\n\r\n                return item.id === wordId ? {...item, important: important} : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        moveWord: (state, action: PayloadAction<{categoryIdFrom: string, categoryIdTo: string, word: Words}>) => {\r\n            const { categoryIdFrom, categoryIdTo, word } = action.payload;\r\n\r\n            state.categories[categoryIdFrom].words = state.categories[categoryIdFrom].words.filter((item) => {\r\n                return item.id !== word.id\r\n            });\r\n\r\n            state.categories[categoryIdTo].words.push(word);\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been moved!', 'success');\r\n        }\r\n    }\r\n})\r\n\r\nexport const { loadVocabulary, createCategory, createWord, deleteCategory, deleteWord, updateWord, searchWords, setImportant, moveWord } = vocabularySlice.actions;\r\n\r\nexport const selectVocabulary = (state: RootState) => state.vocabulary;\r\n\r\nexport default vocabularySlice.reducer;","import { DefaultTheme } from 'styled-components';\r\n\r\nconst theme: DefaultTheme = {\r\n    fontColor: \"#ffffff\",\r\n    fontColorSecondary: \"#999999\",\r\n    primary: \"#232424\",\r\n    secondary: \"#222222\",\r\n    inputBackground: \"#2C2C2C\",\r\n    buttonBorder: \"#000000\",\r\n    importColor: \"#4A7EB5\",\r\n    exportColor: \"#55AA85\",\r\n    categoryBorder: \"#1A1A1A\",\r\n    deleteColor: \"#FF0000\",\r\n    checkBackground: \"#C4C4C4\",\r\n    editColor: \"#52ADA3\",\r\n\r\n    fontSizeEm: '18px',\r\n\r\n    primaryFont: \"Rajdhani\",\r\n    secondaryFont: \"Roboto\"\r\n}\r\n\r\nexport { theme }","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { theme } from '../../theme/theme';\r\nimport { darken } from 'polished';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype backgroundColor = 'import' | 'export' | 'normal' | 'delete';\r\ntype width = 'small' | 'middle' | 'big';\r\n\r\ninterface IButton {\r\n    backgroundColor: backgroundColor;\r\n    width: width;\r\n    children: string;\r\n    href?: string;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    backgroundcolor: backgroundColor;\r\n    width: width;\r\n}\r\n\r\nconst handleColorType = (color: backgroundColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"normal\":\r\n            return theme.secondary;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst handleWidthType = (width: width) => {\r\n    switch(width) {\r\n        case 'small':\r\n            return '20px';\r\n        case 'middle':\r\n            return '40px';\r\n        case 'big':\r\n            return '50px';\r\n        default: return '20px';\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n    text-decoration: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst Button = ({backgroundColor, children, width, onClick, href, ...props}: IButton) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink backgroundcolor={backgroundColor} width={width} to={href} {...props}>\r\n                {children}\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton onClick={onClick} backgroundcolor={backgroundColor} width={width} {...props}>\r\n                {children}\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n`\r\n\r\nconst EmptyCategories = () => {\r\n    return (\r\n        <Container>\r\n            <Button href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyCategories;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\nimport { saveToLocalStorage, loadFromLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\ninterface VocupracticeState {\r\n    type: string;\r\n    reading: boolean;\r\n    categoryId: string;\r\n    selectedCategoriesId: string[];\r\n    word: Words | null;\r\n}\r\n\r\nconst initialState: VocupracticeState = {\r\n    type: 'translation',\r\n    reading: true,\r\n    categoryId: '',\r\n    selectedCategoriesId: [],\r\n    word: null\r\n}\r\n\r\nexport const vocupracticeSlice = createSlice({\r\n    name: 'vocupractice',\r\n    initialState,\r\n    reducers: {\r\n        loadVocupractice: (state) => {\r\n            const data = loadFromLocalStorage('vocupracticesettings');\r\n\r\n            if (data) {\r\n                state.type = data.type ? data.type : 'translation';\r\n                state.reading = data.reading ? data.reading : false;\r\n            }\r\n        },\r\n        setType: (state, action: PayloadAction<string>) => {\r\n            state.type = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setReading: (state, action: PayloadAction<boolean>) => {\r\n            state.reading = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setCategoryId: (state, action: PayloadAction<string>) => {\r\n            state.categoryId = action.payload;\r\n            state.selectedCategoriesId = [];\r\n        },\r\n        setSelectedCategoriesId: (state, action: PayloadAction<string[]>) => {\r\n            state.selectedCategoriesId = action.payload;\r\n            state.categoryId = '';\r\n        },\r\n        setWord: (state, action: PayloadAction<Words | null>) => {\r\n            state.word = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const loadRandomWordFromCategory = (category: string): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    if (!vocubularyCategories[category]) {\r\n        return false;\r\n    }\r\n\r\n    const words = vocubularyCategories[category].words;\r\n    const randomKey = Math.floor(Math.random() * words.length);\r\n\r\n    dispatch(setWord(words[randomKey]))\r\n}\r\n\r\nexport const loadRandomWordFromMultipleCategories = (categoriesId: string[]): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    let randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n    let randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n\r\n    if (!randomCategory) {\r\n        return false;\r\n    }\r\n\r\n    while (randomCategory.words.length === 0) {\r\n        randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n        randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n    }\r\n\r\n    const randomWordKey = Math.floor(Math.random() * randomCategory.words.length);\r\n\r\n    dispatch(setWord(randomCategory.words[randomWordKey]));\r\n}\r\n\r\nexport const { loadVocupractice, setType, setReading, setSelectedCategoriesId, setCategoryId, setWord } = vocupracticeSlice.actions;\r\n\r\nexport const selectVocupractice = (state: RootState) => state.vocupractice;\r\n\r\nexport default vocupracticeSlice.reducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { darken } from 'polished';\r\n\r\ninterface ICategoryBlocks {\r\n    name: string;\r\n    href: string;\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    width: 120px;\r\n    height: 120px;\r\n    border: 2px solid ${({theme}) => theme.categoryBorder};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.1em;\r\n    display: block;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: background .3s;\r\n    word-break: break-word;\r\n    overflow-wrap: break-word;\r\n    text-align: center;\r\n    padding: 5px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.020, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 825px) {\r\n        margin: auto;\r\n    }\r\n`\r\n\r\nconst CategoryBlock = ({name, href}: ICategoryBlocks) => {\r\n    return (\r\n        <StyledLink to={href}>\r\n            {name}\r\n        </StyledLink>\r\n    );\r\n};\r\n\r\nexport default CategoryBlock;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICheckbox {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    label?: string;\r\n    title?: string;\r\n    checked?: boolean;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n` \r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst Input = styled.input`\r\n    transform: scale(1.7);\r\n`\r\n\r\nconst Checkbox = ({onChange, label, checked, title}: ICheckbox) => {\r\n    if (label) {       \r\n        return (\r\n            <Container title={title}>\r\n                <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n                <Text>{label}</Text>\r\n            </Container>\r\n        )\r\n    } else {        \r\n        return (\r\n            <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Checkbox;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { selectVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { setSelectedCategoriesId, setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport CategoryBlock from '../atoms/CategoryBlock';\r\nimport Checkbox from '../atoms/Checkbox';\r\n\r\nconst Container = styled.div`\r\n    width: 600px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst WrapperButtons = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    @media (max-width: 600px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nconst WrapperCategories = styled.div`\r\n    width: 90%;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    margin-top: 20px;\r\n    grid-gap: 20px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    &:first-of-type {\r\n        margin-left: 0;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        margin: 10px 0px;\r\n    }\r\n\r\n    @media (max-width: 360px) {\r\n        padding: 0;\r\n        width: 200px;\r\n    }\r\n`\r\n\r\nconst FullCategories = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [importantValue, setImportantValue] = useState(false);\r\n\r\n    const handlePracticeAllClick = () => {\r\n        if (importantValue) {\r\n            if (vocabularySelector.categories['importantWords'].words.length === 0) {\r\n                alert(\"You don't have any important words!\");\r\n                return false;\r\n            }\r\n\r\n            dispatch(setCategoryId('importantWords'));\r\n\r\n            history.push('/practice');\r\n        } else {\r\n            let isAnyCategoryEmpty: string[] = [];\r\n            Object.keys(vocabularySelector.categories).forEach((item) => {\r\n                const category = vocabularySelector.categories[item];\r\n    \r\n                if (category.words.length === 0) {\r\n                    isAnyCategoryEmpty.push(category.id);\r\n                    return false;\r\n                } \r\n            })\r\n    \r\n            if (isAnyCategoryEmpty.length === Object.keys(vocabularySelector.categories).length) {\r\n                alert('All your categories are empty!');\r\n                return false;\r\n            }\r\n    \r\n            dispatch(setSelectedCategoriesId(Object.keys(vocabularySelector.categories)));\r\n        \r\n            history.push('/practice');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <WrapperButtons>\r\n                <StyledButton href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</StyledButton>\r\n                <StyledButton onClick={handlePracticeAllClick} backgroundColor=\"normal\" width=\"small\">Practice all</StyledButton>\r\n                <Checkbox title=\"Practice all will only use words tagged as important.\" checked={importantValue} onChange={(e) => setImportantValue(e.target.checked)} label=\"important\" />\r\n            </WrapperButtons>\r\n            <WrapperCategories>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        if (category.name === 'important') {\r\n                            return null;\r\n                        }\r\n\r\n                        return (\r\n                            <CategoryBlock key={category.id} href={`/category/${category.id}`} name={category.name} />\r\n                        )\r\n                    })\r\n                }\r\n            </WrapperCategories>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullCategories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype size = 'small' | 'big';\r\n\r\ninterface IPageTitle {\r\n    size: size;\r\n    children: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface TitleProps {\r\n    size: size;\r\n}\r\n\r\nconst Title = styled.span<TitleProps>`\r\n    font-size: ${({size}) => size === 'small' ? '2em' : '3em'};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    padding: 0;\r\n    margin: 0;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n    text-align: center;\r\n    display: block;\r\n`\r\n\r\nconst PageTitle = ({size, children, ...props}: IPageTitle) => {\r\n    return (\r\n        <Title size={size} {...props}>\r\n            {children}\r\n        </Title>\r\n    );\r\n};\r\n\r\nexport default PageTitle;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\ninterface ITitle {\r\n    title?: string;\r\n    length?: number;\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-bottom: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: 1160px) {\r\n        padding-bottom: 20px;\r\n    }\r\n`\r\n\r\nconst WordsLengthContainer = styled.div`\r\n    background: ${({theme}) => darken(0.05, theme.secondary)};\r\n    padding: 0px 5px;\r\n    border-radius: 10px;\r\n    margin-left: 8px;\r\n`\r\n\r\nconst WordsLength = styled.div`\r\n    font-size: 2em;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    user-select: none;\r\n`\r\n\r\nconst Title = ({title, length}: ITitle) => {\r\n    return (\r\n        <Container>\r\n            <PageTitle size=\"small\">{title ? title : `\\u00a0\\u00a0`}</PageTitle>\r\n            { length && \r\n                <WordsLengthContainer>\r\n                    <WordsLength>{length}</WordsLength> \r\n                </WordsLengthContainer>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport EmptyCategories from '../components/organisms/EmptyCategories';\r\nimport FullCategories from '../components/organisms/FullCategories';\r\nimport Title from '../components/molecules/Title';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Categories = () => {\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Vocupractice</title>\r\n            </Helmet>\r\n            <Title />\r\n            {\r\n                Object.keys(vocabularySelector.categories).length > 0 ? <FullCategories /> : <EmptyCategories />\r\n            }\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default Categories;","import React, { forwardRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\ninterface IInput {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    value: string;\r\n    labelText?: string;\r\n    placeholder?: string;\r\n    iconType?: any;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    label?: string;\r\n}\r\n\r\ninterface InputProps {\r\n    iconType?: string;\r\n}\r\n\r\nconst Container = styled.label<ContainerProps>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.4em;\r\n    width: 280px;\r\n    height: ${({label}) => label ? '82px' : '50px'};\r\n    position: relative;\r\n`\r\n\r\nconst LabelText = styled.span`\r\n    padding-left: 5px;\r\n`\r\n\r\nconst ContainerInput = styled.input<InputProps>`\r\n    background: ${({theme}) => theme.inputBackground};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    border: none;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: ${({iconType}) => iconType ? '0px 60px' : '0px 10px'};\r\n    font-size: 1em;\r\n    outline: none;\r\n    \r\n    &::placeholder {\r\n        color: ${({theme}) => theme.fontColorSecondary};\r\n        font-style: italic;\r\n        font-size: 0.6em;\r\n    }\r\n`\r\n\r\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 12px;\r\n`\r\n\r\nconst Input = forwardRef<HTMLInputElement, IInput>((props, ref) => {\r\n    const { onChange, onKeyDown, value, labelText, placeholder, iconType, ...restProps } = props;\r\n    return (\r\n        <Container label={labelText} {...restProps}>\r\n            { labelText && <LabelText>{labelText}</LabelText> }\r\n            { iconType && <StyledFontAwesomeIcon icon={iconType} /> }\r\n            <ContainerInput iconType={iconType} ref={ref} placeholder={placeholder} value={value} onKeyDown={onKeyDown} onChange={onChange} />\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Input from '../atoms/Input';\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IAddCategory {\r\n    onSubmit: (categoryName: string) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 140px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddCategory = ({onSubmit}: IAddCategory) => {\r\n    const [categoryName, setCategoryName] = useState('');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCategoryName(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        \r\n        if (categoryName.trim().length > 0) {\r\n            onSubmit(categoryName);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input labelText=\"Category name\" value={categoryName} onChange={handleInputChange} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, createCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddCategory from '../components/molecules/AddCategory';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst CategoryForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handleSubmit = (categoryName: string) => {\r\n        if (vocabularySelector.categories[categoryName]) {\r\n            alert('Category already exists');\r\n            return false;\r\n        }\r\n\r\n        dispatch(createCategory(categoryName));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Add category - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title=\"Add category\" />\r\n            <AddCategory onSubmit={handleSubmit} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","import { Categories } from '../features/vocabulary/vocabularySlice';\r\n\r\nconst findWordById = (category: Categories, wordId: string) => {\r\n    if (category.words) {\r\n        return category.words.filter((item) => {\r\n            return item.id === wordId;\r\n        })\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default findWordById;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IAddEditWordForm {\r\n    type: formType;\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 325px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddEditWordForm = ({type, id, word, translation, reading, onSubmit}: IAddEditWordForm) => {\r\n    const [wordValue, setWordValue] = useState('');\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const InputWordRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (InputWordRef && InputWordRef.current) {\r\n            InputWordRef.current.focus();\r\n        }\r\n    }, [InputWordRef]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setWordValue(word!);\r\n            setTranslationValue(translation!);\r\n            setReadingValue(reading!);\r\n        }\r\n    }, [id, word, translation, reading]);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (wordValue && translationValue) {\r\n            if (wordValue.trim().length !== 0 && translationValue.trim().length !== 0) {\r\n                onSubmit(e, wordValue, translationValue, readingValue);\r\n            }  \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input ref={InputWordRef} value={wordValue} labelText=\"Word\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setWordValue(e.target.value)} />\r\n            <Input value={translationValue} labelText=\"Translation\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTranslationValue(e.target.value)} />\r\n            <Input value={readingValue} placeholder=\"Leave empty if not needed\" labelText=\"Reading\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setReadingValue(e.target.value)} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">{`${type} word`}</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddEditWordForm;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Redirect, useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport generateRandomId from '../helpers/generateRandomId';\r\nimport findWordById from '../helpers/findWordById';\r\n\r\nimport { selectVocabulary, createWord, updateWord } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddEditWordForm from '../components/organisms/AddEditWordForm';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IWordForm {\r\n    type: formType;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\ninterface editDataInterface {\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n}\r\n\r\nconst WordForm = ({type}: IWordForm) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { wordId, categoryId } = useParams<{ categoryId: string, wordId: string }>();\r\n    const [ editData, setEditData ] = useState<editDataInterface>({\r\n        id: undefined,\r\n        word: undefined,\r\n        translation: undefined,\r\n        reading: undefined,\r\n        important: undefined,\r\n    })\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => {\r\n        if (type === 'add') {\r\n            dispatch(createWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: generateRandomId(),\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading,\r\n                    important: false\r\n                }\r\n            }))\r\n        } else {\r\n            dispatch(updateWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: editData.id!,\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading,\r\n                    important: editData.important!\r\n                }\r\n            }))\r\n        }\r\n\r\n        history.push(`/category/${categoryId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (type === 'edit' && vocabularySelector.categories[categoryId]) {\r\n            const word = findWordById(vocabularySelector.categories[categoryId], wordId);\r\n\r\n            setEditData(word[0]);\r\n        }\r\n    }, [type, vocabularySelector.categories, wordId, categoryId]);\r\n\r\n    if (type === 'add' && !vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (type === 'edit' && ( !vocabularySelector.categories[categoryId] || findWordById(vocabularySelector.categories[categoryId], wordId).length === 0) ) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{type.charAt(0).toUpperCase() + type.slice(1)} word - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title={`${type.toUpperCase()} word`} />\r\n            {\r\n                type === 'add' ? (\r\n                    <AddEditWordForm onSubmit={handleSubmit} type={type}/>\r\n                ) : (\r\n                    <AddEditWordForm {...editData} onSubmit={handleSubmit} type={type}/>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WordForm;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\ninterface ModalState {\r\n    word: Words | null | undefined,\r\n    active: boolean;\r\n    type: string;\r\n    currentCategoryId: string;\r\n}\r\n\r\nexport const initialState: ModalState = {\r\n    word: null,\r\n    currentCategoryId: '',\r\n    active: false,\r\n    type: ''\r\n}\r\n\r\nexport const modalSlice = createSlice({\r\n    name: 'modal',\r\n    initialState,\r\n    reducers: {\r\n        setModalActiveState: (state, action: PayloadAction<{active: boolean, type: string, currentCategoryId: string}>) => {\r\n            const { active, type, currentCategoryId } = action.payload;\r\n            state.active = active;\r\n            state.type = type;\r\n            state.currentCategoryId = currentCategoryId;\r\n        },\r\n        setWord: (state, action: PayloadAction<Words | null | undefined>) => {\r\n            state.word = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setModalActiveState, setWord } = modalSlice.actions;\r\n\r\nexport const selectModal = (state: RootState) => state.modal;\r\n\r\nexport default modalSlice.reducer;","import { useState, useEffect } from 'react';\r\n\r\nconst useAfterUserType = (value: string) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        const timeOut = setTimeout(() => {\r\n            setQuery(value);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeOut);\r\n    }, [value]);\r\n\r\n    return query;\r\n}\r\n\r\nexport default useAfterUserType;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Link } from 'react-router-dom';\r\nimport { theme } from '../../theme/theme';\r\n\r\ntype fontColor = 'edit' | 'delete' | 'export' | 'import' | 'white' | 'normal';\r\n\r\ninterface IButtonIcon {\r\n    fontColor: fontColor;\r\n    iconType: any;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    href?: string;\r\n    fontSize?: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    fontcolor: fontColor;\r\n    fontSize?: string;\r\n}\r\n\r\nconst handleFontColorType = (color: fontColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"edit\":\r\n            return theme.editColor;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        case \"white\":\r\n            return theme.fontColor;\r\n        case \"normal\":\r\n            return theme.fontColorSecondary;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({fontcolor}) => handleFontColorType(fontcolor)};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme, fontcolor}) => fontcolor === 'edit' ? theme.editColor : theme.deleteColor};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ButtonIcon = ({fontColor, iconType, onClick, href, fontSize, ...props}: IButtonIcon) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink fontSize={fontSize} to={href} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton fontSize={fontSize} onClick={onClick} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ButtonIcon;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { lighten } from 'polished';\r\n\r\nimport Checkbox from './Checkbox';\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\ninterface ITableRow {\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n    onCheckClick: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onDeleteClick: () => void;\r\n    onMenuClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    wordId: string;\r\n    categoryId: string;\r\n}\r\n\r\ninterface TableDataProps {\r\n    weight?: number;\r\n    important?: boolean;\r\n}\r\n\r\nconst Tr = styled.tr`\r\n    height: 60px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        aling-items: center;\r\n        margin: 10px 0px;\r\n        height: auto;\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\nconst Td = styled.td<TableDataProps>`\r\n    font-weight: ${({weight}) => weight ? weight : '300'};\r\n\r\n    &:first-child {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        text-align: center;\r\n        \r\n        &:first-child {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    ${({important}) => important && css`\r\n        color: red;\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n`\r\n\r\nconst TableRow = ({word, translation, reading, important, onCheckClick, onDeleteClick, onMenuClick, wordId, categoryId}: ITableRow) => {\r\n    return (\r\n        <Tr>\r\n            <Td important={important} weight={600}>\r\n                {word}\r\n            </Td>\r\n            <Td important={important}>\r\n                {translation}\r\n            </Td>\r\n            <Td important={important}>\r\n                {\r\n                    reading ? reading : '\\u00a0\\u00a0'\r\n                }\r\n            </Td>\r\n            <Td>\r\n                <Wrapper>\r\n                    <ButtonIcon data-tip=\"edit word\" href={`/category/${categoryId}/edit/${wordId}`} iconType=\"edit\" fontColor=\"edit\" />\r\n                    <Checkbox onChange={onCheckClick} />\r\n                    <ButtonIcon data-tip=\"remove word\" onClick={onDeleteClick} iconType=\"trash\" fontColor=\"delete\" />\r\n                    <ButtonIcon onClick={onMenuClick} iconType=\"caret-down\" fontColor=\"normal\" />\r\n                </Wrapper>\r\n            </Td>\r\n        </Tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\nimport TableRow from '../atoms/TableRow';\r\n\r\ninterface IWordsTable {\r\n    words: Words[];\r\n    categoryId: string;\r\n    onWordDeleteClick: (wordId: string) => void;\r\n    onWordCheckClick: (wordId: string, checked: boolean) => void;\r\n    onMenuClick: (e: React.MouseEvent<HTMLButtonElement>, word: Words) => void;\r\n}\r\n\r\nconst Container = styled.table`\r\n    width: 100%;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    font-size: 1.2em;\r\n    border-collapse: collapse;\r\n`\r\n\r\nconst Body = styled.tbody``\r\n\r\nconst WordsTable = ({words, categoryId, onWordDeleteClick, onWordCheckClick, onMenuClick}: IWordsTable) => {\r\n    return useMemo(() => {\r\n        return (\r\n            <Container>\r\n                <Body>\r\n                    {\r\n                        words.map((item) => {\r\n                            return (\r\n                                <TableRow key={item.id} important={item.important} categoryId={categoryId} wordId={item.id} word={item.word} translation={item.translation} reading={item.reading} onMenuClick={(e) => onMenuClick(e, item)} onCheckClick={(e) => onWordCheckClick(item.id, e.target.checked)} onDeleteClick={() => onWordDeleteClick(item.id)} />\r\n                            )\r\n                        })\r\n                    }\r\n                </Body>\r\n            </Container>\r\n        );\r\n    }, [words, categoryId, onWordCheckClick, onWordDeleteClick, onMenuClick]);\r\n\r\n};\r\n\r\nexport default WordsTable;","import React, { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\ninterface ContainerProps {\r\n    shouldShow: boolean;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 50px;\r\n    height: 50px;\r\n    position: fixed;\r\n    right: 20%;\r\n    bottom: 60px;\r\n    opacity: 0;\r\n    visibility: 0;\r\n    z-index: 99;\r\n    transition: opacity .3s ease-in-out, background .3s;\r\n    background: ${({theme}) => theme.secondary};\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n\r\n    ${({shouldShow}) => shouldShow && css`\r\n        opacity: 1;\r\n        visibility: 1;\r\n    `}\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(\"0.050\", theme.secondary)};\r\n    }\r\n\r\n    @media (max-width: 1750px) {\r\n        right: 60px;\r\n    }\r\n`\r\n\r\nconst ScrollToTop = () => {\r\n    const [shouldShowButton, setShouldShowButton] = useState(false);\r\n\r\n    const handleScroll = () => {\r\n        if (window.pageYOffset >= 600) {\r\n            setShouldShowButton(true);\r\n        } else {\r\n            setShouldShowButton(false);\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', handleScroll);\r\n\r\n        return () => document.removeEventListener('scroll', handleScroll);\r\n    }, [])\r\n\r\n    return (\r\n        <Container onClick={handleClick} shouldShow={shouldShowButton}>\r\n            <ButtonIcon fontSize=\"1.8em\" iconType=\"arrow-up\" fontColor=\"white\" />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ScrollToTop;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\ninterface IDropDownMenuProps {\r\n    left: number;\r\n    top: number;\r\n    word: Words | undefined;\r\n    onImportantClick: (wordId: string) => void;\r\n    onMoveClick: (word: Words | undefined) => void;\r\n}\r\n\r\ninterface ContainerProps {\r\n    left: number;\r\n    top: number;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 250px;\r\n    background: ${({theme}) => theme.secondary};\r\n    position: absolute;\r\n    left: ${({left}) => left}px;\r\n    top: ${({top}) => top}px;\r\n    box-shadow: 2px 2px 10px 0px #000;\r\n`\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    width: 100%;\r\n`\r\n\r\nconst ListItem = styled.li`\r\n    width: 100%;\r\n    height: 50px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 1.3em;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.02, theme.primary)};\r\n    }\r\n`\r\n\r\nconst DropDownMenu = ({left, top, word, onImportantClick, onMoveClick}: IDropDownMenuProps) => {\r\n    return (\r\n        <Container left={left} top={top}>\r\n            <List>\r\n                <ListItem>\r\n                    <Button onClick={() => onImportantClick(word!.id)}>{word!.important ? \"Not important\" : \"Important\" }</Button>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button onClick={() => onMoveClick(word)}>Move</Button>\r\n                </ListItem>\r\n            </List>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DropDownMenu;","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\nimport { setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport useAfterUserType from '../../hooks/useAfterUserType';\r\n\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport { selectVocabulary, deleteWord, searchWords, setImportant } from '../../features/vocabulary/vocabularySlice';\r\nimport { setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport WordsTable from '../molecules/WordsTable';\r\nimport Input from '../atoms/Input';\r\nimport ScrollToTop from '../molecules/ScrollToTop';\r\nimport DropDownMenu from '../molecules/DropDownMenu';\r\n\r\ninterface IFullWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    width: 900px;\r\n    position: relative;\r\n\r\n    @media (max-width: 930px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width: 930px) {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-gap: 20px;\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    @media (max-width: 717px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst FullWords = ({categoryId, onCategoryDeleteclick}: IFullWords) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const containerRef = useRef<HTMLDivElement>(null)\r\n    const [selectedWords, setSelectedWords] = useState<{[key: string]: boolean}>({});\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [dropDownMenuShow, setDropDownMenuShow] = useState(false);\r\n    const [dropdownMenuLeft, setDropdownMenuLeft] = useState(0);\r\n    const [dropdownMenuTop, setDropdownMenuTop] = useState(0);\r\n    const [dropdownMenuWord, setDropDownMenuWord] = useState<Words>();\r\n    \r\n    const searchQuery = useAfterUserType(searchValue);\r\n\r\n    useHotkeys('ctrl+a', (e) => handleAddWordShortcut(e));\r\n\r\n    const handleAddWordShortcut = (e: KeyboardEvent) => {\r\n        e.preventDefault();\r\n        history.push(`/category/${categoryId}/add`);\r\n    }\r\n\r\n    const handleWordDelete = useCallback((wordId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this word?')) {\r\n            dispatch(deleteWord({\r\n                categoryId: categoryId,\r\n                wordId: wordId,\r\n                notification: true\r\n            }))\r\n        }\r\n    }, [categoryId, dispatch]);\r\n\r\n    const handleCheckClick = useCallback((wordId: string, checked: boolean) => {\r\n        setSelectedWords({...selectedWords, [wordId]: checked});\r\n    }, [selectedWords]);\r\n\r\n    const handleDeleteSelected = () => {\r\n        if (window.confirm('Are you sure you want to delete all selected words?')) {\r\n            Object.keys(selectedWords).map((id) => {\r\n                const isChecked = selectedWords[id];\r\n\r\n                if (!isChecked) {\r\n                    return false;\r\n                }\r\n\r\n                return dispatch(deleteWord({\r\n                    categoryId: categoryId,\r\n                    wordId: id,\r\n                    notification: false\r\n                }))\r\n            })\r\n\r\n            showNotification('Success!', 'Selected words has been deleted!', 'success');\r\n        }\r\n    }\r\n\r\n    const handleMenuClick = (e: React.MouseEvent<HTMLButtonElement>, word: Words) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const targetRect = e.currentTarget.getBoundingClientRect();\r\n\r\n        if (containerRef && containerRef.current) {\r\n            let left = targetRect.left - containerRef.current.offsetLeft;\r\n            let top = targetRect.top - containerRef.current.offsetTop + window.scrollY;\r\n\r\n            if (left + 250 >= window.innerWidth - 250) {\r\n                left -= 220;\r\n            }\r\n\r\n            setDropdownMenuLeft(left);\r\n            setDropdownMenuTop(top);\r\n            setDropDownMenuWord(word);\r\n            setDropDownMenuShow(true);\r\n        }\r\n    }\r\n\r\n    const handleImportantClick = (wordId: string) => {\r\n        dispatch(setImportant({\r\n            categoryId: categoryId,\r\n            wordId: wordId,\r\n            important: dropdownMenuWord!.important ? false : true\r\n        }))\r\n    }\r\n\r\n    const handleMoveClick = (word: Words | undefined) => {\r\n        dispatch(setWord(word));\r\n        dispatch(setModalActiveState({\r\n            active: true,\r\n            type: 'move',\r\n            currentCategoryId: categoryId\r\n        }))\r\n    }\r\n\r\n    const handlePracticeClick = () => {\r\n        dispatch(setCategoryId(categoryId));\r\n\r\n        history.push('/practice');\r\n    }\r\n\r\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleOutsideClick = () => {\r\n            if (dropDownMenuShow) {\r\n                setDropDownMenuShow(false);\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', handleOutsideClick)\r\n\r\n        return () => document.removeEventListener('click', handleOutsideClick);\r\n    }, [dropDownMenuShow]);\r\n\r\n    useEffect(() => {\r\n        dispatch(searchWords({query: searchQuery, categoryId}))\r\n    }, [searchQuery, categoryId, dispatch]);\r\n\r\n    if (!vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container ref={containerRef}>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <ScrollToTop />\r\n            <Wrapper>\r\n                <StyledButton onClick={handlePracticeClick} backgroundColor=\"normal\" width=\"small\">Practice</StyledButton>\r\n                <StyledButton data-tip=\"(ctrl + a)\" href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n                <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n                <StyledButton onClick={handleDeleteSelected} backgroundColor=\"delete\" width=\"small\">Delete selected</StyledButton>\r\n            </Wrapper>\r\n            <StyledInput iconType=\"search\" onChange={handleSearchChange} value={searchValue} />\r\n            <WordsTable categoryId={categoryId} onMenuClick={handleMenuClick} onWordCheckClick={handleCheckClick} onWordDeleteClick={handleWordDelete} words={vocabularySelector.searchWords.length === 0 ? vocabularySelector.categories[categoryId].words : vocabularySelector.searchWords} />\r\n            {dropDownMenuShow && <DropDownMenu onMoveClick={handleMoveClick} onImportantClick={handleImportantClick} word={dropdownMenuWord} left={dropdownMenuLeft} top={dropdownMenuTop} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IEmptyWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    @media (max-width: 825px) {\r\n        margin: 10px 0px;\r\n    }    \r\n`\r\n\r\nconst EmptyWords = ({categoryId, onCategoryDeleteclick}: IEmptyWords) => {\r\n    return (\r\n        <Container>\r\n            <StyledButton href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n            <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, deleteCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport FullWords from '../components/organisms/FullWords'\r\nimport EmptyWords from '../components/organisms/EmptyWords';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Words = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const handleCategoryDelete = (categoryId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this category?')) {\r\n            dispatch(deleteCategory(categoryId));\r\n        }\r\n    }\r\n\r\n    if (!vocabularySelector.categories[id]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{vocabularySelector.categories[id].name.charAt(0).toUpperCase() + vocabularySelector.categories[id].name.slice(1)} - Vocupractice</title>\r\n            </Helmet>\r\n            <Title length={vocabularySelector.categories[id].words.length && vocabularySelector.categories[id].words.length} title={`Category / ${vocabularySelector.categories[id].name}`} />\r\n            {\r\n                vocabularySelector.categories[id].words.length > 0 ? <FullWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} /> : <EmptyWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} />\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Words;","const ifEqual = (value1: string, value2: string) => {\r\n    if (value1.toLocaleLowerCase() === value2.toLocaleLowerCase()) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default ifEqual;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IRadio {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.input`\r\n    transform: scale(1.1);\r\n    margin: 0;\r\n`\r\n\r\nconst Radio = ({onChange, name, checked, ...props}: IRadio) => {\r\n    return (\r\n        <Container checked={checked} type=\"radio\" name={name} onChange={onChange} {...props} />\r\n    );\r\n};\r\n\r\nexport default Radio;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Radio from '../atoms/Radio';\r\n\r\ninterface IVocupracticeRadioBtn {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    text: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledRadio = styled(Radio)`\r\n    position: relative;\r\n    bottom: 1px;\r\n`\r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst VocupracticeRadioBtn = ({onChange, name, checked, text, ...props}: IVocupracticeRadioBtn) => {\r\n    return (\r\n        <Container {...props}>\r\n            <StyledRadio checked={checked} onChange={onChange} name={name} />\r\n            <Text>{text}</Text>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default VocupracticeRadioBtn;","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { selectVocupractice, loadVocupractice, setType, setReading, loadRandomWordFromCategory, loadRandomWordFromMultipleCategories, setWord } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport ifEqual from '../../helpers/ifEqual';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport VocupracticeRadioBtn from '../molecules/VocupracticeRadioBtn';\r\n\r\ninterface WrapperProps {\r\n    column?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n    isCorrect: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    align-items: center;\r\n`\r\n\r\nconst Word = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    text-align: center;\r\n`\r\n\r\nconst Reading = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColorSecondary};\r\n    font-size: 1.1em;\r\n    text-align: center;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst StyledInput = styled(Input)<InputProps>`\r\n    margin: 5px 0px;\r\n    \r\n    & > input {\r\n        transition: background .3s ease-in-out;\r\n    }\r\n\r\n    ${({isCorrect}) => isCorrect && css`\r\n        & > input {\r\n            background: #33F633;\r\n            pointer-events: none;\r\n        }\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n    display: flex;\r\n    margin: 5px 0px;\r\n\r\n    ${({column}) => column && css`\r\n        flex-direction: column;\r\n    `}\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    font-size: 0.7em;\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledVocupracticeRadioBtn = styled(VocupracticeRadioBtn)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst Vocupractice = () => {\r\n    const dispatch = useDispatch();\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const [translationCorrect, setTranslationCorrect] = useState('');\r\n    const [readingCorrect, setReadingCorrect] = useState('');\r\n    const [allCorrect, setAllCorect] = useState(false);\r\n\r\n    const readingInputRef = useRef<HTMLInputElement>(null);\r\n    const translationInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const initNewWord = useCallback(() => {\r\n        if (vocupracticeSelector.categoryId !== '') {\r\n            dispatch(loadRandomWordFromCategory(vocupracticeSelector.categoryId));\r\n        } else {\r\n            dispatch(loadRandomWordFromMultipleCategories(vocupracticeSelector.selectedCategoriesId));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadVocupractice());\r\n\r\n        initNewWord();\r\n\r\n        return () => {\r\n            dispatch(setWord(null));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId, initNewWord])\r\n\r\n    useEffect(() => {\r\n        if (translationCorrect === 'true' && readingCorrect === 'true') {\r\n            setAllCorect(true);\r\n        }\r\n    }, [translationCorrect, readingCorrect])\r\n\r\n    const handleTranslationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (translationCorrect !== 'true') {\r\n            setTranslationValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleReadingChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (readingCorrect !== 'true') {\r\n            setReadingValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleTranslationCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && (e.key === 'Enter' || e.key === 'Tab')) {\r\n            if (!vocupracticeSelector.word.reading) {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n\r\n                    if (vocupracticeSelector.type !== 'both') {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (vocupracticeSelector.type === 'both' && e.key !== 'Tab') {\r\n                readingInputRef.current && readingInputRef.current.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReadingCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && e.key === 'Enter') {\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                    setReadingCorrect('true');\r\n\r\n                    if (translationCorrect !== 'true') {\r\n                        if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                            setTranslationCorrect('true');\r\n                        }\r\n                    }\r\n\r\n                    if (vocupracticeSelector.type === 'reading') {\r\n                        setTranslationCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCheckClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                setTranslationCorrect('true');\r\n            }\r\n\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') {\r\n                    if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                } else {\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                setReadingCorrect('true');\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetWord = () => {\r\n        setTranslationValue('');\r\n        setReadingValue('');\r\n        setTranslationCorrect('');\r\n        setReadingCorrect('');\r\n        setAllCorect(false);\r\n    }\r\n\r\n    const handleNextClick = () => {\r\n        resetWord();\r\n\r\n        initNewWord();\r\n    }\r\n\r\n    const handleAnswerClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            setTranslationValue(vocupracticeSelector.word.translation);\r\n            setReadingValue(vocupracticeSelector.word.reading ? vocupracticeSelector.word.reading : '');\r\n            setTranslationCorrect('true');\r\n            setReadingCorrect('true');\r\n        }\r\n    }\r\n\r\n    const handleVocupracticeKeyEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter' && allCorrect) {\r\n            resetWord();\r\n\r\n            initNewWord();\r\n\r\n            translationInputRef.current!.focus();\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type: string) => {\r\n        dispatch(setType(type));\r\n\r\n        resetWord();\r\n    }\r\n\r\n    const handleReadingCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setReading(e.target.checked));\r\n    }\r\n\r\n    if (vocupracticeSelector.categoryId === '' && vocupracticeSelector.selectedCategoriesId.length === 0) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (!vocupracticeSelector.word) {\r\n        return (\r\n            <Container />\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Container onKeyDown={handleVocupracticeKeyEnter}>\r\n            <Word>{vocupracticeSelector.word.word}</Word>\r\n            {vocupracticeSelector.reading && vocupracticeSelector.word.reading && <Reading>{`(${vocupracticeSelector.word.reading})`}</Reading>}\r\n            {(vocupracticeSelector.type === 'translation' || vocupracticeSelector.type === 'both') ? <StyledInput isCorrect={translationCorrect === 'true' ? true : false} ref={translationInputRef} placeholder=\"Translation\" onKeyDown={handleTranslationCheck} onChange={handleTranslationChange} value={translationValue} /> : ''}\r\n            {(vocupracticeSelector.word.reading && ( vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') ) ? <StyledInput isCorrect={readingCorrect === 'true' ? true : false} ref={readingInputRef} placeholder=\"Reading\" onKeyDown={handleReadingCheck} onChange={handleReadingChange} value={readingValue} /> : ''}\r\n            <Wrapper>\r\n                <StyledButton onClick={handleAnswerClick} backgroundColor=\"normal\" width=\"small\">Answer</StyledButton>\r\n                <StyledButton onClick={handleNextClick} backgroundColor=\"normal\" width=\"small\">Next</StyledButton>\r\n                <StyledButton onClick={handleCheckClick} backgroundColor=\"normal\" width=\"small\">Check</StyledButton>\r\n            </Wrapper>\r\n            {\r\n                vocupracticeSelector.word.reading && (\r\n                    <Wrapper column>\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'translation'} text=\"translation\" name=\"type\" onChange={() => handleTypeChange('translation')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'reading'} text=\"reading\" name=\"type\" onChange={() => handleTypeChange('reading')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'both'} text=\"both\" name=\"type\" onChange={() => handleTypeChange('both')} />\r\n                    </Wrapper>\r\n                )\r\n            }\r\n            {vocupracticeSelector.word.reading && <Checkbox checked={vocupracticeSelector.reading} label=\"show reading\" onChange={handleReadingCheckbox} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Vocupractice;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectVocupractice } from '../features/vocupractice/vocupracticeSlice';\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport Vocupractice from '../components/organisms/Vocupractice';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Practice = () => {\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [practiceTitle, setPracticeTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (vocupracticeSelector.categoryId) {\r\n            setPracticeTitle(`/ ${vocabularySelector.categories[vocupracticeSelector.categoryId].name}`);\r\n        } else {\r\n            setPracticeTitle('');\r\n        }\r\n\r\n        return () => setPracticeTitle('');\r\n    }, [vocupracticeSelector.categoryId, vocabularySelector.categories]);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Practice - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title={`Practice ${practiceTitle}`}/>\r\n            <Vocupractice />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Practice;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Message = styled.span`\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    user-select: none;\r\n`\r\n\r\nconst NoFound = () => {\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>404 - Vocupractice</title>\r\n            </Helmet>\r\n            <Message>Hey! It looks like you're lost!</Message>\r\n            <Message>Click on vocupractice logo to go back :)</Message>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NoFound;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\nconst Container = styled.div`\r\n    margin-right: auto;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n`\r\n\r\nconst Logo = () => {\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 470px)'\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <StyledLink to=\"/\">\r\n                <PageTitle size={isMobile ? 'small' : 'big'}>Vocupractice</PageTitle>\r\n            </StyledLink>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { selectVocabulary, loadVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport Button from '../atoms/Button';\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n`\r\n\r\nconst InputFile = styled.input`\r\n    display: none;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledButtonIcon = styled(ButtonIcon)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst ImportExportBtns = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 825px)'\r\n    });\r\n    const inputFileRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleImportClick = () => {\r\n        if (inputFileRef.current) {\r\n            inputFileRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleExportClick = () => {\r\n        const file = new Blob([JSON.stringify(vocabularySelector.categories)], {type: 'text/plain'});\r\n        const element = document.createElement('a');\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'vocupractice.txt';\r\n        element.click();\r\n        showNotification('Success', 'Your data has been exported', 'success');\r\n    }\r\n\r\n    const handleFileImport = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const file = e.target.files[0];\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                if (e.target) {\r\n                    try {\r\n                        const json = JSON.parse(e.target.result as string);\r\n                        const importantWordsArray: any[] = [];\r\n\r\n                        const categoriesKeysToCompare = ['id', 'name', 'words'];\r\n                        const wordKeysToCompare = ['id', 'word', 'translation', 'reading'];\r\n\r\n                        Object.keys(json).forEach((item) => {\r\n                            const category = json[item];\r\n                            const categoryKeys = Object.keys(category);\r\n\r\n                            if (JSON.stringify(categoryKeys) !== JSON.stringify(categoriesKeysToCompare)) {\r\n                                throw Error('Not vocupractice file');\r\n                            }\r\n\r\n                            Object.keys(category.words).forEach((item) => {\r\n                                const word = category.words[item];\r\n                                const wordKeys = Object.keys(word);\r\n\r\n                                if (wordKeys.indexOf('important') !== -1) {\r\n                                    importantWordsArray.push(word);\r\n\r\n                                    wordKeys.splice(wordKeys.indexOf('important', 1));\r\n                                }\r\n\r\n                                if (JSON.stringify(wordKeys) !== JSON.stringify(wordKeysToCompare)) {\r\n                                    throw Error('Not vocupractice file');\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        json['importantWords'] = {\r\n                            id: 'importantwords',\r\n                            name: 'important',\r\n                            words: importantWordsArray\r\n                        }\r\n\r\n                        dispatch(loadVocabulary(json));\r\n                        saveToLocalStorage('vocupractice', json);\r\n                        showNotification('Success', 'Data has been imported!', 'success');\r\n                    } catch (error) {\r\n                        showNotification('Error', 'This is not a valid vocupractice file!', 'danger');\r\n                        inputFileRef.current!.value = '';\r\n                    }\r\n                }\r\n            }\r\n            file && reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputFile onChange={handleFileImport} ref={inputFileRef} type=\"file\" accept=\".txt\" />\r\n            {\r\n                isMobile ? (\r\n                    <>\r\n                        <StyledButtonIcon data-tip=\"import\" fontSize=\"1.5em\" fontColor=\"import\" iconType=\"file-import\" onClick={handleImportClick}/>\r\n                        <StyledButtonIcon data-tip=\"export\" fontSize=\"1.5em\" fontColor=\"export\" iconType=\"file-export\" onClick={handleExportClick}/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <StyledButton backgroundColor=\"import\" width=\"big\" onClick={handleImportClick}>Import</StyledButton>\r\n                        <StyledButton backgroundColor=\"export\" width=\"big\" onClick={handleExportClick}>Export</StyledButton>\r\n                    </>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ImportExportBtns;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport Logo from '../molecules/Logo';\r\nimport ImportExportBtsn from '../molecules/ImportExportBtns';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n\r\n    @media (max-width: 470px) {\r\n        padding: 10px 10px;\r\n    }\r\n`\r\n\r\nconst Headbar = () => {\r\n    return (\r\n        <Container>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <Logo />\r\n            <ImportExportBtsn />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Headbar;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectVocabulary, moveWord } from '../../features/vocabulary/vocabularySlice';\r\nimport { selectModal, setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 600px;\r\n    height: 250px;\r\n    background: ${({theme}) => theme.primary};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    box-shadow: 5px 5px 20px 0px #000;\r\n`\r\n\r\nconst Title = styled.span`\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 1.6em;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n`\r\n\r\nconst SelectInput = styled.select`\r\n    width: 60%;\r\n    height: 40px;\r\n    margin-top: 10px;\r\n`\r\n\r\nconst SelectOption = styled.option``\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 30px;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n    font-size: 1.2em;\r\n`\r\n\r\nconst ModalMove = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const modalSelector = useSelector(selectModal);\r\n    const [selectValue, setSelectValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        setSelectValue(modalSelector.currentCategoryId);\r\n    }, [modalSelector.currentCategoryId]);\r\n\r\n    const handleSelectchange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelectValue(e.target.value);\r\n    }\r\n\r\n    const handleMoveClick = () => {\r\n        dispatch(moveWord({\r\n            categoryIdFrom: modalSelector.currentCategoryId,\r\n            categoryIdTo: selectValue,\r\n            word: modalSelector.word!\r\n        }));\r\n        dispatch(setWord(null));\r\n        dispatch(setModalActiveState({\r\n            active: false,\r\n            type: '',\r\n            currentCategoryId: ''\r\n        }));\r\n    }\r\n\r\n\r\n    const handleCloseClick = () => {\r\n        dispatch(setWord(null));\r\n        dispatch(setModalActiveState({\r\n            active: false,\r\n            type: '',\r\n            currentCategoryId: ''\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Select category</Title>\r\n            <SelectInput value={selectValue} onChange={handleSelectchange}>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        if (category.name === 'important') return false;\r\n\r\n                        return (\r\n                            <SelectOption value={category.id} key={category.id}>{category.name}</SelectOption>\r\n                        )\r\n                    })\r\n                }\r\n            </SelectInput>\r\n            <Wrapper>\r\n                <StyledButton onClick={handleMoveClick} backgroundColor=\"normal\" width=\"small\">Move</StyledButton>\r\n                <StyledButton onClick={handleCloseClick} backgroundColor=\"normal\" width=\"small\">Close</StyledButton>\r\n            </Wrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ModalMove;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectModal, setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport ModalMove from '../molecules/ModalMove';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background: rgba(0,0,0,0.3);\r\n    z-index: 9999;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst ModalContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const modalSelector = useSelector(selectModal);\r\n\r\n    const renderModal = (type: string) => {\r\n        switch(modalSelector.type) {\r\n            case 'move':\r\n                return <ModalMove />\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    const handleOutsideClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        const target = e.target as HTMLDivElement;\r\n\r\n        if (target.id === 'modal-outside') {\r\n            dispatch(setModalActiveState({\r\n                active: false,\r\n                currentCategoryId: '',\r\n                type: ''\r\n            }));\r\n            dispatch(setWord(null));\r\n        }\r\n    }\r\n\r\n    if (!modalSelector.active) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container id=\"modal-outside\" onClick={handleOutsideClick}>\r\n            {\r\n                renderModal(modalSelector.type)\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faEdit, faTrash, faFileImport, faFileExport, faSearch, faArrowUp, faCaretDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { useDispatch } from 'react-redux';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\n\r\nimport { loadVocabulary } from './features/vocabulary/vocabularySlice';\r\n\r\nimport { loadFromLocalStorage } from './helpers/localStorageHandler';\r\n\r\nimport Categories from './pages/Categories';\r\nimport CategoryForm from './pages/CategoryForm';\r\nimport WordForm from './pages/WordForm';\r\nimport Words from './pages/Words';\r\nimport Practice from './pages/Practice';\r\nimport NoFound from './pages/NoFound';\r\nimport Headbar from './components/organisms/Headbar';\r\nimport ModalContainer from './components/organisms/ModalContainer';\r\n\r\nlibrary.add(faEdit, faTrash, faFileExport, faFileImport, faSearch, faArrowUp, faCaretDown);\r\n\r\nconst GlobalContainer = styled.div`\r\n\twidth: 100%;\r\n\tmin-height: 100vh;\r\n\tfont-size: ${({theme}) => theme.fontSizeEm};\r\n\tbackground: ${({theme}) => theme.primary};\r\n\tpadding: 50px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst data = loadFromLocalStorage('vocupractice');\r\n\r\n\t\tif (data) {\r\n\t\t\tdispatch(loadVocabulary(data));\r\n\t\t}\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ReactNotification />\r\n\t\t\t<GlobalContainer>\r\n\t\t\t\t<Headbar />\r\n\t\t\t\t<ModalContainer />\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<Categories />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/addcategory\">\r\n\t\t\t\t\t\t<CategoryForm />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/add\">\r\n\t\t\t\t\t\t<WordForm type=\"add\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/edit/:wordId\">\r\n\t\t\t\t\t\t<WordForm type=\"edit\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:id\">\r\n\t\t\t\t\t\t<Words />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/practice\">\r\n\t\t\t\t\t\t<Practice />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"*\">\r\n\t\t\t\t\t\t<NoFound />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</GlobalContainer>\r\n\t\t</>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport vocabularyReducer from '../features/vocabulary/vocabularySlice';\r\nimport vocupracticeReducer from '../features/vocupractice/vocupracticeSlice';\r\nimport modalReducer from '../features/modal/modalSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tvocabulary: vocabularyReducer,\r\n\t\tvocupractice: vocupracticeReducer,\r\n\t\tmodal: modalReducer\r\n\t},\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n\tReturnType,\r\n\tRootState,\r\n\tunknown,\r\n\tAction<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n    \r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n        monospace;\r\n    }\r\n\r\n    *,\r\n    *::after,\r\n    *::before {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6,\r\n    p,\r\n    ol,\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme/theme';\r\nimport GlobalStyles from './theme/GlobalStyles';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n    \t<Provider store={store}>\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t\t<GlobalStyles />\r\n\t\t\t\t<HashRouter>\r\n      \t\t\t\t<App />\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</ThemeProvider>\r\n    \t</Provider>\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}