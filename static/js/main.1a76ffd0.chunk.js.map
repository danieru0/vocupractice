{"version":3,"sources":["helpers/generateRandomId.tsx","helpers/localStorageHandler.tsx","features/vocabulary/vocabularySlice.ts","theme/theme.tsx","components/atoms/Button.tsx","components/organisms/EmptyCategories.tsx","features/vocupractice/vocupracticeSlice.ts","components/atoms/CategoryBlock.tsx","components/organisms/FullCategories.tsx","components/atoms/PageTitle.tsx","components/molecules/Title.tsx","pages/Categories.tsx","components/atoms/Input.tsx","components/molecules/AddCategory.tsx","pages/CategoryForm.tsx","helpers/findWordById.tsx","components/organisms/AddEditWordForm.tsx","pages/WordForm.tsx","components/atoms/Checkbox.tsx","components/atoms/ButtonIcon.tsx","components/atoms/TableRow.tsx","components/molecules/WordsTable.tsx","components/organisms/FullWords.tsx","components/organisms/EmptyWords.tsx","pages/Words.tsx","components/atoms/Radio.tsx","components/molecules/VocupracticeRadioBtn.tsx","components/organisms/Vocupractice.tsx","pages/Practice.tsx","pages/NoFound.tsx","components/molecules/Logo.tsx","components/molecules/ImportExportBtns.tsx","components/organisms/Headbar.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme/GlobalStyles.tsx","index.tsx"],"names":["generateRandomId","Math","random","toString","substr","saveToLocalStorage","name","data","localStorage","setItem","JSON","stringify","loadFromLocalStorage","getItem","parse","undefined","vocabularySlice","createSlice","initialState","categories","reducers","loadVocabulary","state","action","payload","createCategory","randomId","id","words","current","createWord","categoryId","word","deleteCategory","deleteWord","wordId","filter","item","updateWord","selectedWord","map","actions","selectVocabulary","vocabulary","theme","fontColor","fontColorSecondary","primary","secondary","inputBackground","buttonBorder","importColor","exportColor","categoryBorder","deleteColor","checkBackground","editColor","fontSizeEm","primaryFont","secondaryFont","handleColorType","color","handleWidthType","width","ContainerButton","styled","button","backgroundcolor","darken","ContainerLink","Link","Button","backgroundColor","children","onClick","href","props","to","Container","div","EmptyCategories","vocupracticeSlice","type","reading","selectedCategoriesId","loadVocupractice","setType","setReading","setCategoryId","setSelectedCategoriesId","setWord","selectVocupractice","vocupractice","StyledLink","CategoryBlock","WrapperButtons","WrapperCategories","StyledButton","FullCategories","history","useHistory","dispatch","useDispatch","vocabularySelector","useSelector","isAnyCategoryEmpty","Object","keys","forEach","category","length","push","alert","Title","span","size","PageTitle","title","Categories","label","LabelText","ContainerInput","input","Input","forwardRef","ref","onChange","onKeyDown","value","labelText","placeholder","restProps","form","AddCategory","onSubmit","useState","categoryName","setCategoryName","e","preventDefault","trim","target","CategoryForm","findWordById","AddEditWordForm","translation","wordValue","setWordValue","translationValue","setTranslationValue","readingValue","setReadingValue","useEffect","WordForm","useParams","editData","setEditData","handleSubmit","toUpperCase","Text","Checkbox","checked","handleFontColorType","fontcolor","fontSize","ButtonIcon","iconType","icon","Tr","tr","lighten","Td","td","weight","Wrapper","TableRow","onCheckClick","onDeleteClick","table","Body","tbody","WordsTable","onWordDeleteClick","onWordCheckClick","FullWords","onCategoryDeleteclick","selectedWords","setSelectedWords","window","confirm","EmptyWords","Words","handleCategoryDelete","Radio","StyledRadio","VocupracticeRadioBtn","text","Word","Reading","StyledInput","isCorrect","css","column","StyledVocupracticeRadioBtn","Vocupractice","vocupracticeSelector","translationCorrect","setTranslationCorrect","readingCorrect","setReadingCorrect","allCorrect","setAllCorect","readingInputRef","useRef","translationInputRef","initNewWord","useCallback","categoriesId","getState","vocubularyCategories","randomKey","floor","randomCategoryKey","randomCategory","randomWordKey","resetWord","handleTypeChange","key","focus","Practice","NoFound","Logo","isMobile","useMediaQuery","query","InputFile","StyledButtonIcon","ImportExportBtns","inputFileRef","handleImportClick","click","handleExportClick","file","Blob","element","document","createElement","URL","createObjectURL","download","files","reader","FileReader","onload","json","result","categoriesKeysToCompare","wordKeysToCompare","categoryKeys","Error","wordKeys","error","readAsText","accept","Headbar","library","add","faEdit","faTrash","faFileExport","faFileImport","GlobalContainer","App","exact","path","store","configureStore","reducer","vocabularyReducer","vocupracticeReducer","Boolean","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyles","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1a76ffd0.chunk.js","sourcesContent":["const generateRandomId = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport default generateRandomId;","export const saveToLocalStorage = (name: string, data: any) => {\r\n    localStorage.setItem(name, JSON.stringify(data));\r\n}\r\n\r\nexport const loadFromLocalStorage = (name: string) => {\r\n    return localStorage.getItem(name) \r\n        ? JSON.parse(localStorage.getItem(name)!)\r\n        : undefined;\r\n}","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport generateRandomId from '../../helpers/generateRandomId';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\nexport interface Words {\r\n    id: string;\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n}\r\n\r\nexport interface Categories {\r\n    id: string;\r\n    name: string;\r\n    words: Words[]\r\n}\r\n\r\n\r\ninterface VocabularyState {\r\n    categories: {\r\n        [key: string]: Categories\r\n    }\r\n}\r\n\r\nexport const initialState: VocabularyState = {\r\n    categories: {}\r\n}\r\n\r\nexport const vocabularySlice = createSlice({\r\n    name: 'vocubulary',\r\n    initialState,\r\n    reducers: {\r\n        loadVocabulary: (state, action: PayloadAction<any>) => {\r\n            state.categories = action.payload;\r\n        },\r\n        createCategory: (state, action: PayloadAction<string>) => {\r\n            const randomId = generateRandomId();\r\n            \r\n            state.categories[randomId] = {\r\n                id: randomId,\r\n                name: action.payload,\r\n                words: []\r\n            }\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        createWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            state.categories[categoryId].words = [...state.categories[categoryId].words, word];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        deleteCategory: (state, action: PayloadAction<string>) => {\r\n            delete state.categories[action.payload];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        deleteWord: (state, action: PayloadAction<{categoryId: string, wordId: string}>) => {\r\n            const { categoryId, wordId } = action.payload;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.filter((item) => {\r\n                return item.id !== wordId;\r\n            });\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        updateWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            const selectedWord = state.categories[categoryId].words.filter((item) => {\r\n                return item.id === word.id;\r\n            })[0] = word;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                return item.id === word.id ? selectedWord : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        }\r\n    }\r\n})\r\n\r\nexport const { loadVocabulary, createCategory, createWord, deleteCategory, deleteWord, updateWord } = vocabularySlice.actions;\r\n\r\nexport const selectVocabulary = (state: RootState) => state.vocabulary;\r\n\r\nexport default vocabularySlice.reducer;","import { DefaultTheme } from 'styled-components';\r\n\r\nconst theme: DefaultTheme = {\r\n    fontColor: \"#ffffff\",\r\n    fontColorSecondary: \"#999999\",\r\n    primary: \"#232424\",\r\n    secondary: \"#222222\",\r\n    inputBackground: \"#2C2C2C\",\r\n    buttonBorder: \"#000000\",\r\n    importColor: \"#4A7EB5\",\r\n    exportColor: \"#55AA85\",\r\n    categoryBorder: \"#1A1A1A\",\r\n    deleteColor: \"#FF0000\",\r\n    checkBackground: \"#C4C4C4\",\r\n    editColor: \"#52ADA3\",\r\n\r\n    fontSizeEm: '18px',\r\n\r\n    primaryFont: \"Rajdhani\",\r\n    secondaryFont: \"Roboto\"\r\n}\r\n\r\nexport { theme }","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { theme } from '../../theme/theme';\r\nimport { darken } from 'polished';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype backgroundColor = 'import' | 'export' | 'normal' | 'delete';\r\ntype width = 'small' | 'middle' | 'big';\r\n\r\ninterface IButton {\r\n    backgroundColor: backgroundColor;\r\n    width: width;\r\n    children: string;\r\n    href?: string;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    backgroundcolor: backgroundColor;\r\n    width: width;\r\n}\r\n\r\nconst handleColorType = (color: backgroundColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"normal\":\r\n            return theme.secondary;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst handleWidthType = (width: width) => {\r\n    switch(width) {\r\n        case 'small':\r\n            return '20px';\r\n        case 'middle':\r\n            return '40px';\r\n        case 'big':\r\n            return '50px';\r\n        default: return '20px';\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n    text-decoration: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst Button = ({backgroundColor, children, width, onClick, href, ...props}: IButton) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink backgroundcolor={backgroundColor} width={width} to={href} {...props}>\r\n                {children}\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton onClick={onClick} backgroundcolor={backgroundColor} width={width} {...props}>\r\n                {children}\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n`\r\n\r\nconst EmptyCategories = () => {\r\n    return (\r\n        <Container>\r\n            <Button href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyCategories;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\nimport { saveToLocalStorage, loadFromLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\ninterface VocupracticeState {\r\n    type: string;\r\n    reading: boolean;\r\n    categoryId: string;\r\n    selectedCategoriesId: string[];\r\n    word: Words | null;\r\n}\r\n\r\nconst initialState: VocupracticeState = {\r\n    type: 'translation',\r\n    reading: true,\r\n    categoryId: '',\r\n    selectedCategoriesId: [],\r\n    word: null\r\n}\r\n\r\nexport const vocupracticeSlice = createSlice({\r\n    name: 'vocupractice',\r\n    initialState,\r\n    reducers: {\r\n        loadVocupractice: (state) => {\r\n            const data = loadFromLocalStorage('vocupracticesettings');\r\n\r\n            if (data) {\r\n                state.type = data.type ? data.type : 'translation';\r\n                state.reading = data.reading ? data.reading : false;\r\n            }\r\n        },\r\n        setType: (state, action: PayloadAction<string>) => {\r\n            state.type = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setReading: (state, action: PayloadAction<boolean>) => {\r\n            state.reading = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setCategoryId: (state, action: PayloadAction<string>) => {\r\n            state.categoryId = action.payload;\r\n            state.selectedCategoriesId = [];\r\n        },\r\n        setSelectedCategoriesId: (state, action: PayloadAction<string[]>) => {\r\n            state.selectedCategoriesId = action.payload;\r\n            state.categoryId = '';\r\n        },\r\n        setWord: (state, action: PayloadAction<Words | null>) => {\r\n            state.word = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const loadRandomWordFromCategory = (category: string): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    if (!vocubularyCategories[category]) {\r\n        return false;\r\n    }\r\n\r\n    const words = vocubularyCategories[category].words;\r\n    const randomKey = Math.floor(Math.random() * words.length);\r\n\r\n    dispatch(setWord(words[randomKey]))\r\n}\r\n\r\nexport const loadRandomWordFromMultipleCategories = (categoriesId: string[]): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    let randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n    let randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n\r\n    if (!randomCategory) {\r\n        return false;\r\n    }\r\n\r\n    while (randomCategory.words.length === 0) {\r\n        randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n        randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n    }\r\n\r\n    const randomWordKey = Math.floor(Math.random() * randomCategory.words.length);\r\n\r\n    dispatch(setWord(randomCategory.words[randomWordKey]));\r\n}\r\n\r\nexport const { loadVocupractice, setType, setReading, setSelectedCategoriesId, setCategoryId, setWord } = vocupracticeSlice.actions;\r\n\r\nexport const selectVocupractice = (state: RootState) => state.vocupractice;\r\n\r\nexport default vocupracticeSlice.reducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { darken } from 'polished';\r\n\r\ninterface ICategoryBlocks {\r\n    name: string;\r\n    href: string;\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    width: 120px;\r\n    height: 120px;\r\n    border: 2px solid ${({theme}) => theme.categoryBorder};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.1em;\r\n    display: block;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: background .3s;\r\n    word-break: break-word;\r\n    overflow-wrap: break-word;\r\n    text-align: center;\r\n    padding: 5px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.020, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        margin: auto;\r\n    }\r\n`\r\n\r\nconst CategoryBlock = ({name, href}: ICategoryBlocks) => {\r\n    return (\r\n        <StyledLink to={href}>\r\n            {name}\r\n        </StyledLink>\r\n    );\r\n};\r\n\r\nexport default CategoryBlock;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { selectVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { setSelectedCategoriesId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport CategoryBlock from '../atoms/CategoryBlock';\r\n\r\nconst Container = styled.div`\r\n    width: 560px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 600px) {\r\n        width: 90%;\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n`\r\n\r\nconst WrapperButtons = styled.div`\r\n    display: flex;\r\n    width: auto;\r\n\r\n    @media (max-width: 600px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nconst WrapperCategories = styled.div`\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    margin-top: 20px;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    &:first-of-type {\r\n        margin-left: 0;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        margin: 10px 0px;\r\n    }\r\n\r\n    @media (max-width: 360px) {\r\n        padding: 0;\r\n        width: 200px;\r\n    }\r\n`\r\n\r\nconst FullCategories = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handlePracticeAllClick = () => {\r\n        let isAnyCategoryEmpty: string[] = [];\r\n        Object.keys(vocabularySelector.categories).forEach((item) => {\r\n            const category = vocabularySelector.categories[item];\r\n\r\n            if (category.words.length === 0) {\r\n                isAnyCategoryEmpty.push(category.id);\r\n                return false;\r\n            } \r\n        })\r\n\r\n        if (isAnyCategoryEmpty.length === Object.keys(vocabularySelector.categories).length) {\r\n            alert('All your categories are empty!');\r\n            return false;\r\n        }\r\n\r\n        dispatch(setSelectedCategoriesId(Object.keys(vocabularySelector.categories)));\r\n    \r\n        history.push('/practice');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <WrapperButtons>\r\n                <StyledButton href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</StyledButton>\r\n                <StyledButton onClick={handlePracticeAllClick} backgroundColor=\"normal\" width=\"small\">Practice all</StyledButton>\r\n            </WrapperButtons>\r\n            <WrapperCategories>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        return (\r\n                            <CategoryBlock key={category.id} href={`/category/${category.id}`} name={category.name} />\r\n                        )\r\n                    })\r\n                }\r\n            </WrapperCategories>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullCategories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype size = 'small' | 'big';\r\n\r\ninterface IPageTitle {\r\n    size: size;\r\n    children: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface TitleProps {\r\n    size: size;\r\n}\r\n\r\nconst Title = styled.span<TitleProps>`\r\n    font-size: ${({size}) => size === 'small' ? '2em' : '3em'};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    padding: 0;\r\n    margin: 0;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n    text-align: center;\r\n    display: block;\r\n`\r\n\r\nconst PageTitle = ({size, children, ...props}: IPageTitle) => {\r\n    return (\r\n        <Title size={size} {...props}>\r\n            {children}\r\n        </Title>\r\n    );\r\n};\r\n\r\nexport default PageTitle;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\ninterface ITitle {\r\n    title?: string;\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-bottom: 15px;\r\n\r\n    @media (max-width: 1160px) {\r\n        position: relative;\r\n        top: 20px;\r\n        padding-bottom: 20px;\r\n    }\r\n`\r\n\r\nconst Title = ({title}: ITitle) => {\r\n    return (\r\n        <Container>\r\n            {\r\n                <PageTitle size=\"small\">{title ? title : `\\u00a0\\u00a0`}</PageTitle>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport EmptyCategories from '../components/organisms/EmptyCategories';\r\nimport FullCategories from '../components/organisms/FullCategories';\r\nimport Title from '../components/molecules/Title';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Categories = () => {\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    return (\r\n        <Container>\r\n            <Title />\r\n            {\r\n                Object.keys(vocabularySelector.categories).length > 0 ? <FullCategories /> : <EmptyCategories />\r\n            }\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default Categories;","import React, { forwardRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IInput {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    value: string;\r\n    labelText?: string;\r\n    placeholder?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.4em;\r\n`\r\n\r\nconst LabelText = styled.span`\r\n    padding-left: 5px;\r\n`\r\n\r\nconst ContainerInput = styled.input`\r\n    background: ${({theme}) => theme.inputBackground};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    border: none;\r\n    width: 280px;\r\n    height: 50px;\r\n    padding: 0px 10px;\r\n    font-size: 1em;\r\n    outline: none;\r\n    \r\n    &::placeholder {\r\n        color: ${({theme}) => theme.fontColorSecondary};\r\n        font-style: italic;\r\n        font-size: 0.6em;\r\n    }\r\n`\r\n\r\nconst Input = forwardRef<HTMLInputElement, IInput>((props, ref) => {\r\n    const { onChange, onKeyDown, value, labelText, placeholder, ...restProps } = props;\r\n    return (\r\n        <Container {...restProps}>\r\n            { labelText && <LabelText>{labelText}</LabelText> }\r\n            <ContainerInput ref={ref} placeholder={placeholder} value={value} onKeyDown={onKeyDown} onChange={onChange} />\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Input from '../atoms/Input';\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IAddCategory {\r\n    onSubmit: (categoryName: string) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 140px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddCategory = ({onSubmit}: IAddCategory) => {\r\n    const [categoryName, setCategoryName] = useState('');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCategoryName(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        \r\n        if (categoryName.trim().length > 0) {\r\n            onSubmit(categoryName);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input labelText=\"Category name\" value={categoryName} onChange={handleInputChange} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { selectVocabulary, createCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddCategory from '../components/molecules/AddCategory';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst CategoryForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handleSubmit = (categoryName: string) => {\r\n        if (vocabularySelector.categories[categoryName]) {\r\n            alert('Category already exists');\r\n            return false;\r\n        }\r\n\r\n        dispatch(createCategory(categoryName));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Title title=\"Add category\" />\r\n            <AddCategory onSubmit={handleSubmit} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","import { Categories } from '../features/vocabulary/vocabularySlice';\r\n\r\nconst findWordById = (category: Categories, wordId: string) => {\r\n    if (category.words) {\r\n        return category.words.filter((item) => {\r\n            return item.id === wordId;\r\n        })\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default findWordById;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IAddEditWordForm {\r\n    type: formType;\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 325px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddEditWordForm = ({type, id, word, translation, reading, onSubmit}: IAddEditWordForm) => {\r\n    const [wordValue, setWordValue] = useState('');\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setWordValue(word!);\r\n            setTranslationValue(translation!);\r\n            setReadingValue(reading!);\r\n        }\r\n    }, [id, word, translation, reading]);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (wordValue && translationValue) {\r\n            if (wordValue.trim().length !== 0 && translationValue.trim().length !== 0) {\r\n                onSubmit(e, wordValue, translationValue, readingValue);\r\n            }  \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input value={wordValue} labelText=\"Word\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setWordValue(e.target.value)} />\r\n            <Input value={translationValue} labelText=\"Translation\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTranslationValue(e.target.value)} />\r\n            <Input value={readingValue} placeholder=\"Leave empty if not needed\" labelText=\"Reading\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setReadingValue(e.target.value)} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">{`${type} word`}</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddEditWordForm;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Redirect, useHistory } from 'react-router-dom';\r\n\r\nimport generateRandomId from '../helpers/generateRandomId';\r\nimport findWordById from '../helpers/findWordById';\r\n\r\nimport { selectVocabulary, createWord, updateWord } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddEditWordForm from '../components/organisms/AddEditWordForm';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IWordForm {\r\n    type: formType;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\ninterface editDataInterface {\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n}\r\n\r\nconst WordForm = ({type}: IWordForm) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { wordId, categoryId } = useParams<{ categoryId: string, wordId: string }>();\r\n    const [ editData, setEditData ] = useState<editDataInterface>({\r\n        id: undefined,\r\n        word: undefined,\r\n        translation: undefined,\r\n        reading: undefined\r\n    })\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => {\r\n        if (type === 'add') {\r\n            dispatch(createWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: generateRandomId(),\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading\r\n                }\r\n            }))\r\n        } else {\r\n            dispatch(updateWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: editData.id!,\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading\r\n                }\r\n            }))\r\n        }\r\n\r\n        history.push(`/category/${categoryId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (type === 'edit' && vocabularySelector.categories[categoryId]) {\r\n            const word = findWordById(vocabularySelector.categories[categoryId], wordId);\r\n\r\n            setEditData(word[0]);\r\n        }\r\n    }, [type, vocabularySelector.categories, wordId, categoryId]);\r\n\r\n    if (type === 'add' && !vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (type === 'edit' && ( !vocabularySelector.categories[categoryId] || findWordById(vocabularySelector.categories[categoryId], wordId).length === 0) ) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Title title={`${type.toUpperCase()} word`} />\r\n            {\r\n                type === 'add' ? (\r\n                    <AddEditWordForm onSubmit={handleSubmit} type={type}/>\r\n                ) : (\r\n                    <AddEditWordForm {...editData} onSubmit={handleSubmit} type={type}/>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WordForm;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICheckbox {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    label?: string;\r\n    checked?: boolean;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n` \r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst Input = styled.input`\r\n    transform: scale(1.7);\r\n`\r\n\r\nconst Checkbox = ({onChange, label, checked}: ICheckbox) => {\r\n    if (label) {       \r\n        return (\r\n            <Container>\r\n                <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n                <Text>{label}</Text>\r\n            </Container>\r\n        )\r\n    } else {        \r\n        return (\r\n            <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Link } from 'react-router-dom';\r\nimport { theme } from '../../theme/theme';\r\n\r\ntype fontColor = 'edit' | 'delete' | 'export' | 'import' ;\r\n\r\ninterface IButtonIcon {\r\n    fontColor: fontColor;\r\n    iconType: any;\r\n    onClick?: () => void;\r\n    href?: string;\r\n    fontSize?: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    fontcolor: fontColor;\r\n    fontSize?: string;\r\n}\r\n\r\nconst handleFontColorType = (color: fontColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"edit\":\r\n            return theme.editColor;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({fontcolor}) => handleFontColorType(fontcolor)};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme, fontcolor}) => fontcolor === 'edit' ? theme.editColor : theme.deleteColor};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ButtonIcon = ({fontColor, iconType, onClick, href, fontSize, ...props}: IButtonIcon) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink fontSize={fontSize} to={href} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton fontSize={fontSize} onClick={onClick} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ButtonIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { lighten } from 'polished';\r\n\r\nimport Checkbox from './Checkbox';\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\ninterface ITableRow {\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    onCheckClick: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onDeleteClick: () => void;\r\n    wordId: string;\r\n    categoryId: string;\r\n}\r\n\r\ninterface TableDataProps {\r\n    weight?: number;\r\n}\r\n\r\nconst Tr = styled.tr`\r\n    height: 60px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        aling-items: center;\r\n        margin: 10px 0px;\r\n        height: auto;\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\nconst Td = styled.td<TableDataProps>`\r\n    font-weight: ${({weight}) => weight ? weight : '300'};\r\n\r\n    &:first-child {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        text-align: center;\r\n        \r\n        &:first-child {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n`\r\n\r\nconst TableRow = ({word, translation, reading, onCheckClick, onDeleteClick, wordId, categoryId}: ITableRow) => {\r\n    return (\r\n        <Tr>\r\n            <Td weight={600}>\r\n                {word}\r\n            </Td>\r\n            <Td>\r\n                {translation}\r\n            </Td>\r\n            <Td>\r\n                {\r\n                    reading ? reading : '\\u00a0\\u00a0'\r\n                }\r\n            </Td>\r\n            <Td>\r\n                <Wrapper>\r\n                    <ButtonIcon href={`/category/${categoryId}/edit/${wordId}`} iconType=\"edit\" fontColor=\"edit\" />\r\n                    <Checkbox onChange={onCheckClick} />\r\n                    <ButtonIcon onClick={onDeleteClick} iconType=\"trash\" fontColor=\"delete\" />\r\n                </Wrapper>\r\n            </Td>\r\n        </Tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\nimport TableRow from '../atoms/TableRow';\r\n\r\ninterface IWordsTable {\r\n    words: Words[];\r\n    categoryId: string;\r\n    onWordDeleteClick: (wordId: string) => void;\r\n    onWordCheckClick: (wordId: string, checked: boolean) => void;\r\n}\r\n\r\nconst Container = styled.table`\r\n    width: 100%;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    font-size: 1.2em;\r\n    border-collapse: collapse;\r\n`\r\n\r\nconst Body = styled.tbody``\r\n\r\nconst WordsTable = ({words, categoryId, onWordDeleteClick, onWordCheckClick}: IWordsTable) => {\r\n    return (\r\n        <Container>\r\n            <Body>\r\n                {\r\n                    words.map((item) => {\r\n                        return (\r\n                            <TableRow key={item.id} categoryId={categoryId} wordId={item.id} word={item.word} translation={item.translation} reading={item.reading} onCheckClick={(e) => onWordCheckClick(item.id, e.target.checked)} onDeleteClick={() => onWordDeleteClick(item.id)} />\r\n                        )\r\n                    })\r\n                }\r\n            </Body>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WordsTable;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectVocabulary, deleteWord } from '../../features/vocabulary/vocabularySlice';\r\nimport { setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport WordsTable from '../molecules/WordsTable';\r\n\r\ninterface IFullWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    width: 900px;\r\n\r\n    @media (max-width: 930px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width: 930px) {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-gap: 20px;\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    @media (max-width: 700px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\n\r\nconst FullWords = ({categoryId, onCategoryDeleteclick}: IFullWords) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [selectedWords, setSelectedWords] = useState<{[key: string]: boolean}>({});\r\n\r\n    const handleWordDelete = (wordId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this word?')) {\r\n            dispatch(deleteWord({\r\n                categoryId: categoryId,\r\n                wordId: wordId\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleCheckClick = (wordId: string, checked: boolean) => {\r\n        setSelectedWords({...selectedWords, [wordId]: checked});\r\n    }\r\n\r\n    const handleDeleteSelected = () => {\r\n        if (window.confirm('Are you sure you want to delete all selected words?')) {\r\n            Object.keys(selectedWords).map((id) => {\r\n                const isChecked = selectedWords[id];\r\n\r\n                if (!isChecked) {\r\n                    return false;\r\n                }\r\n\r\n                return dispatch(deleteWord({\r\n                    categoryId: categoryId,\r\n                    wordId: id\r\n                }))\r\n            })\r\n        }\r\n    }\r\n\r\n    const handlePracticeClick = () => {\r\n        dispatch(setCategoryId(categoryId));\r\n\r\n        history.push('/practice');\r\n    }\r\n\r\n    if (!vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Wrapper>\r\n                <StyledButton onClick={handlePracticeClick} backgroundColor=\"normal\" width=\"small\">Practice</StyledButton>\r\n                <StyledButton href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n                <StyledButton onClick={handleDeleteSelected} backgroundColor=\"delete\" width=\"small\">Delete selected</StyledButton>\r\n                <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n            </Wrapper>\r\n            <WordsTable categoryId={categoryId} onWordCheckClick={handleCheckClick} onWordDeleteClick={handleWordDelete} words={vocabularySelector.categories[categoryId].words} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IEmptyWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst EmptyWords = ({categoryId, onCategoryDeleteclick}: IEmptyWords) => {\r\n    return (\r\n        <Container>\r\n            <StyledButton href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n            <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectVocabulary, deleteCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport FullWords from '../components/organisms/FullWords'\r\nimport EmptyWords from '../components/organisms/EmptyWords';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Words = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const handleCategoryDelete = (categoryId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this category?')) {\r\n            dispatch(deleteCategory(categoryId));\r\n        }\r\n    }\r\n\r\n    if (!vocabularySelector.categories[id]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Title title={`Category / ${vocabularySelector.categories[id].name}`} />\r\n            {\r\n                vocabularySelector.categories[id].words.length > 0 ? <FullWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} /> : <EmptyWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} />\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Words;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IRadio {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.input`\r\n    transform: scale(1.1);\r\n    margin: 0;\r\n`\r\n\r\nconst Radio = ({onChange, name, checked, ...props}: IRadio) => {\r\n    return (\r\n        <Container checked={checked} type=\"radio\" name={name} onChange={onChange} {...props} />\r\n    );\r\n};\r\n\r\nexport default Radio;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Radio from '../atoms/Radio';\r\n\r\ninterface IVocupracticeRadioBtn {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    text: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledRadio = styled(Radio)`\r\n    position: relative;\r\n    bottom: 1px;\r\n`\r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst VocupracticeRadioBtn = ({onChange, name, checked, text, ...props}: IVocupracticeRadioBtn) => {\r\n    return (\r\n        <Container {...props}>\r\n            <StyledRadio checked={checked} onChange={onChange} name={name} />\r\n            <Text>{text}</Text>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default VocupracticeRadioBtn;","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { selectVocupractice, loadVocupractice, setType, setReading, loadRandomWordFromCategory, loadRandomWordFromMultipleCategories, setWord } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport VocupracticeRadioBtn from '../molecules/VocupracticeRadioBtn';\r\n\r\ninterface WrapperProps {\r\n    column?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n    isCorrect: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    align-items: center;\r\n`\r\n\r\nconst Word = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    text-align: center;\r\n`\r\n\r\nconst Reading = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColorSecondary};\r\n    font-size: 1.1em;\r\n    text-align: center;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst StyledInput = styled(Input)<InputProps>`\r\n    margin: 5px 0px;\r\n    \r\n    & > input {\r\n        transition: background .3s ease-in-out;\r\n    }\r\n\r\n    ${({isCorrect}) => isCorrect && css`\r\n        & > input {\r\n            background: #33F633;\r\n            pointer-events: none;\r\n        }\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n    display: flex;\r\n    margin: 5px 0px;\r\n\r\n    ${({column}) => column && css`\r\n        flex-direction: column;\r\n    `}\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    font-size: 0.7em;\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledVocupracticeRadioBtn = styled(VocupracticeRadioBtn)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst Vocupractice = () => {\r\n    const dispatch = useDispatch();\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const [translationCorrect, setTranslationCorrect] = useState('');\r\n    const [readingCorrect, setReadingCorrect] = useState('');\r\n    const [allCorrect, setAllCorect] = useState(false);\r\n\r\n    const readingInputRef = useRef<HTMLInputElement>(null);\r\n    const translationInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const initNewWord = useCallback(() => {\r\n        if (vocupracticeSelector.categoryId !== '') {\r\n            dispatch(loadRandomWordFromCategory(vocupracticeSelector.categoryId));\r\n        } else {\r\n            dispatch(loadRandomWordFromMultipleCategories(vocupracticeSelector.selectedCategoriesId));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadVocupractice());\r\n\r\n        initNewWord();\r\n\r\n        return () => {\r\n            dispatch(setWord(null));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId, initNewWord])\r\n\r\n    useEffect(() => {\r\n        if (translationCorrect === 'true' && readingCorrect === 'true') {\r\n            setAllCorect(true);\r\n        }\r\n    }, [translationCorrect, readingCorrect])\r\n\r\n    const handleTranslationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (translationCorrect !== 'true') {\r\n            setTranslationValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleReadingChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (readingCorrect !== 'true') {\r\n            setReadingValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleTranslationCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && (e.key === 'Enter' || e.key === 'Tab')) {\r\n            if (!vocupracticeSelector.word.reading) {\r\n                if (translationValue === vocupracticeSelector.word.translation) {\r\n                    setTranslationCorrect('true');\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                if (translationValue === vocupracticeSelector.word.translation) {\r\n                    setTranslationCorrect('true');\r\n\r\n                    if (vocupracticeSelector.type !== 'both') {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (vocupracticeSelector.type === 'both' && e.key !== 'Tab') {\r\n                readingInputRef.current && readingInputRef.current.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReadingCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && e.key === 'Enter') {\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (vocupracticeSelector.word.reading === readingValue) {\r\n                    setReadingCorrect('true');\r\n\r\n                    if (translationCorrect !== 'true') {\r\n                        if (vocupracticeSelector.word.translation === translationValue) {\r\n                            setTranslationCorrect('true');\r\n                        }\r\n                    }\r\n\r\n                    if (vocupracticeSelector.type === 'reading') {\r\n                        setTranslationCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCheckClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            if (translationValue === vocupracticeSelector.word.translation) {\r\n                setTranslationCorrect('true');\r\n            }\r\n\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') {\r\n                    if (readingValue === vocupracticeSelector.word.reading) {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                } else {\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                setReadingCorrect('true');\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetWord = () => {\r\n        setTranslationValue('');\r\n        setReadingValue('');\r\n        setTranslationCorrect('');\r\n        setReadingCorrect('');\r\n        setAllCorect(false);\r\n    }\r\n\r\n    const handleNextClick = () => {\r\n        resetWord();\r\n\r\n        initNewWord();\r\n    }\r\n\r\n    const handleAnswerClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            setTranslationValue(vocupracticeSelector.word.translation);\r\n            setReadingValue(vocupracticeSelector.word.reading ? vocupracticeSelector.word.reading : '');\r\n            setTranslationCorrect('true');\r\n            setReadingCorrect('true');\r\n        }\r\n    }\r\n\r\n    const handleVocupracticeKeyEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter' && allCorrect) {\r\n            resetWord();\r\n\r\n            initNewWord();\r\n\r\n            translationInputRef.current!.focus();\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type: string) => {\r\n        dispatch(setType(type));\r\n\r\n        resetWord();\r\n    }\r\n\r\n    const handleReadingCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setReading(e.target.checked));\r\n    }\r\n\r\n    if (vocupracticeSelector.categoryId === '' && vocupracticeSelector.selectedCategoriesId.length === 0) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (!vocupracticeSelector.word) {\r\n        return (\r\n            <Container>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Container onKeyDown={handleVocupracticeKeyEnter}>\r\n            <Word>{vocupracticeSelector.word.word}</Word>\r\n            {vocupracticeSelector.reading && vocupracticeSelector.word.reading && <Reading>{`(${vocupracticeSelector.word.reading})`}</Reading>}\r\n            {(vocupracticeSelector.type === 'translation' || vocupracticeSelector.type === 'both') ? <StyledInput isCorrect={translationCorrect === 'true' ? true : false} ref={translationInputRef} placeholder=\"Translation\" onKeyDown={handleTranslationCheck} onChange={handleTranslationChange} value={translationValue} /> : ''}\r\n            {(vocupracticeSelector.word.reading && ( vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') ) ? <StyledInput isCorrect={readingCorrect === 'true' ? true : false} ref={readingInputRef} placeholder=\"Reading\" onKeyDown={handleReadingCheck} onChange={handleReadingChange} value={readingValue} /> : ''}\r\n            <Wrapper>\r\n                <StyledButton onClick={handleAnswerClick} backgroundColor=\"normal\" width=\"small\">Answer</StyledButton>\r\n                <StyledButton onClick={handleNextClick} backgroundColor=\"normal\" width=\"small\">Next</StyledButton>\r\n                <StyledButton onClick={handleCheckClick} backgroundColor=\"normal\" width=\"small\">Check</StyledButton>\r\n            </Wrapper>\r\n            {\r\n                vocupracticeSelector.word.reading && (\r\n                    <Wrapper column>\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'translation'} text=\"translation\" name=\"type\" onChange={() => handleTypeChange('translation')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'reading'} text=\"reading\" name=\"type\" onChange={() => handleTypeChange('reading')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'both'} text=\"both\" name=\"type\" onChange={() => handleTypeChange('both')} />\r\n                    </Wrapper>\r\n                )\r\n            }\r\n            {vocupracticeSelector.word.reading && <Checkbox checked={vocupracticeSelector.reading} label=\"show reading\" onChange={handleReadingCheckbox} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Vocupractice;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport Vocupractice from '../components/organisms/Vocupractice';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Practice = () => {\r\n    return (\r\n        <Container>\r\n            <Title title=\"Practice / verbs\" />\r\n            <Vocupractice />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Practice;","import React from 'react';\r\n\r\nconst NoFound = () => {\r\n    return (\r\n        <div>\r\n            <h1>404</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoFound;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\nconst Container = styled.div`\r\n    margin-right: auto;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n`\r\n\r\nconst Logo = () => {\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 470px)'\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <StyledLink to=\"/\">\r\n                <PageTitle size={isMobile ? 'small' : 'big'}>Vocupractice</PageTitle>\r\n            </StyledLink>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectVocabulary, loadVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\nimport Button from '../atoms/Button';\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n`\r\n\r\nconst InputFile = styled.input`\r\n    display: none;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledButtonIcon = styled(ButtonIcon)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst ImportExportBtns = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 825px)'\r\n    });\r\n    const inputFileRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleImportClick = () => {\r\n        if (inputFileRef.current) {\r\n            inputFileRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleExportClick = () => {\r\n        const file = new Blob([JSON.stringify(vocabularySelector.categories)], {type: 'text/plain'});\r\n        const element = document.createElement('a');\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'vocupractice.txt';\r\n        element.click();\r\n    }\r\n\r\n    const handleFileImport = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const file = e.target.files[0];\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                if (e.target) {\r\n                    try {\r\n                        const json = JSON.parse(e.target.result as string);\r\n\r\n                        const categoriesKeysToCompare = ['id', 'name', 'words'];\r\n                        const wordKeysToCompare = ['id', 'word', 'translation', 'reading'];\r\n\r\n                        Object.keys(json).forEach((item) => {\r\n                            const category = json[item];\r\n                            const categoryKeys = Object.keys(category);\r\n\r\n                            if (JSON.stringify(categoryKeys) !== JSON.stringify(categoriesKeysToCompare)) {\r\n                                throw Error('Not vocupractice file');\r\n                            }\r\n\r\n                            Object.keys(category.words).forEach((item) => {\r\n                                const word = category.words[item];\r\n                                const wordKeys = Object.keys(word);\r\n\r\n                                if (JSON.stringify(wordKeys) !== JSON.stringify(wordKeysToCompare)) {\r\n                                    throw Error('Not vocupractice file');\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        dispatch(loadVocabulary(json));\r\n                        saveToLocalStorage('vocupractice', json);\r\n\r\n                    } catch (error) {\r\n                        alert('The uploaded file is invalid!');\r\n                        inputFileRef.current!.value = '';\r\n                    }\r\n                }\r\n            }\r\n            reader.readAsText(file);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputFile onChange={handleFileImport} ref={inputFileRef} type=\"file\" accept=\".txt\" />\r\n            {\r\n                isMobile ? (\r\n                    <>\r\n                        <StyledButtonIcon fontSize=\"1.5em\" fontColor=\"import\" iconType=\"file-import\" onClick={handleImportClick}/>\r\n                        <StyledButtonIcon fontSize=\"1.5em\" fontColor=\"export\" iconType=\"file-export\" onClick={handleExportClick}/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <StyledButton backgroundColor=\"import\" width=\"big\" onClick={handleImportClick}>Import</StyledButton>\r\n                        <StyledButton backgroundColor=\"export\" width=\"big\" onClick={handleExportClick}>Export</StyledButton>\r\n                    </>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ImportExportBtns;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Logo from '../molecules/Logo';\r\nimport ImportExportBtsn from '../molecules/ImportExportBtns';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n\r\n    @media (max-width: 470px) {\r\n        padding: 10px 10px;\r\n    }\r\n`\r\n\r\nconst Headbar = () => {\r\n    return (\r\n        <Container>\r\n            <Logo />\r\n            <ImportExportBtsn />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Headbar;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faEdit, faTrash, faFileImport, faFileExport } from '@fortawesome/free-solid-svg-icons'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { loadVocabulary } from './features/vocabulary/vocabularySlice';\r\n\r\nimport { loadFromLocalStorage } from './helpers/localStorageHandler';\r\n\r\nimport Categories from './pages/Categories';\r\nimport CategoryForm from './pages/CategoryForm';\r\nimport WordForm from './pages/WordForm';\r\nimport Words from './pages/Words';\r\nimport Practice from './pages/Practice';\r\nimport NoFound from './pages/NoFound';\r\nimport Headbar from './components/organisms/Headbar';\r\n\r\nlibrary.add(faEdit, faTrash, faFileExport, faFileImport);\r\n\r\nconst GlobalContainer = styled.div`\r\n\twidth: 100%;\r\n\tmin-height: 100vh;\r\n\tfont-size: ${({theme}) => theme.fontSizeEm};\r\n\tbackground: ${({theme}) => theme.primary};\r\n\tpadding: 50px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst data = loadFromLocalStorage('vocupractice');\r\n\r\n\t\tif (data) {\r\n\t\t\tdispatch(loadVocabulary(data));\r\n\t\t}\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<GlobalContainer>\r\n\t\t\t<Headbar />\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t<Categories />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"/addcategory\">\r\n\t\t\t\t\t<CategoryForm />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/category/:categoryId/add\">\r\n\t\t\t\t\t<WordForm type=\"add\" />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/category/:categoryId/edit/:wordId\">\r\n\t\t\t\t\t<WordForm type=\"edit\" />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/category/:id\">\r\n\t\t\t\t\t<Words />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/practice\">\r\n\t\t\t\t\t<Practice />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path=\"*\">\r\n\t\t\t\t\t<NoFound />\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</GlobalContainer>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport vocabularyReducer from '../features/vocabulary/vocabularySlice';\r\nimport vocupracticeReducer from '../features/vocupractice/vocupracticeSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tvocabulary: vocabularyReducer,\r\n\t\tvocupractice: vocupracticeReducer\r\n\t},\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n\tReturnType,\r\n\tRootState,\r\n\tunknown,\r\n\tAction<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n    \r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n        monospace;\r\n    }\r\n\r\n    *,\r\n    *::after,\r\n    *::before {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6,\r\n    p,\r\n    ol,\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme/theme';\r\nimport GlobalStyles from './theme/GlobalStyles';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n    \t<Provider store={store}>\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t\t<GlobalStyles />\r\n\t\t\t\t<HashRouter>\r\n      \t\t\t\t<App />\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</ThemeProvider>\r\n    \t</Provider>\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}