{"version":3,"sources":["helpers/generateRandomId.tsx","helpers/localStorageHandler.tsx","helpers/showNotification.tsx","features/vocabulary/vocabularySlice.ts","theme/theme.tsx","components/atoms/Button.tsx","components/organisms/EmptyCategories.tsx","features/vocupractice/vocupracticeSlice.ts","components/atoms/CategoryBlock.tsx","components/organisms/FullCategories.tsx","components/atoms/PageTitle.tsx","components/molecules/Title.tsx","pages/Categories.tsx","components/atoms/Input.tsx","components/molecules/AddCategory.tsx","pages/CategoryForm.tsx","helpers/findWordById.tsx","components/organisms/AddEditWordForm.tsx","pages/WordForm.tsx","hooks/useAfterUserType.tsx","components/atoms/Checkbox.tsx","components/atoms/ButtonIcon.tsx","components/atoms/TableRow.tsx","components/molecules/WordsTable.tsx","components/molecules/ScrollToTop.tsx","components/organisms/FullWords.tsx","components/organisms/EmptyWords.tsx","pages/Words.tsx","helpers/ifEqual.tsx","components/atoms/Radio.tsx","components/molecules/VocupracticeRadioBtn.tsx","components/organisms/Vocupractice.tsx","pages/Practice.tsx","pages/NoFound.tsx","components/molecules/Logo.tsx","components/molecules/ImportExportBtns.tsx","components/organisms/Headbar.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme/GlobalStyles.tsx","index.tsx"],"names":["generateRandomId","Math","random","toString","substr","saveToLocalStorage","name","data","localStorage","setItem","JSON","stringify","loadFromLocalStorage","getItem","parse","undefined","showNotification","title","message","type","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","vocabularySlice","createSlice","initialState","categories","searchWords","reducers","loadVocabulary","state","action","payload","createCategory","randomId","id","words","current","createWord","categoryId","word","deleteCategory","deleteWord","wordId","notification","filter","item","updateWord","selectedWord","map","query","trim","length","foundWords","includes","translation","reading","actions","selectVocabulary","vocabulary","theme","fontColor","fontColorSecondary","primary","secondary","inputBackground","buttonBorder","importColor","exportColor","categoryBorder","deleteColor","checkBackground","editColor","fontSizeEm","primaryFont","secondaryFont","handleColorType","color","handleWidthType","width","ContainerButton","styled","button","backgroundcolor","darken","ContainerLink","Link","Button","backgroundColor","children","onClick","href","props","to","Container","div","EmptyCategories","vocupracticeSlice","selectedCategoriesId","loadVocupractice","setType","setReading","setCategoryId","setSelectedCategoriesId","setWord","selectVocupractice","vocupractice","StyledLink","CategoryBlock","WrapperButtons","WrapperCategories","StyledButton","FullCategories","history","useHistory","dispatch","useDispatch","vocabularySelector","useSelector","isAnyCategoryEmpty","Object","keys","forEach","category","push","alert","Title","span","size","PageTitle","WordsLengthContainer","WordsLength","Categories","Helmet","label","LabelText","ContainerInput","input","iconType","StyledFontAwesomeIcon","FontAwesomeIcon","Input","forwardRef","ref","onChange","onKeyDown","value","labelText","placeholder","restProps","icon","form","AddCategory","onSubmit","useState","categoryName","setCategoryName","e","preventDefault","target","CategoryForm","findWordById","AddEditWordForm","wordValue","setWordValue","translationValue","setTranslationValue","readingValue","setReadingValue","InputWordRef","useRef","useEffect","focus","WordForm","useParams","editData","setEditData","handleSubmit","charAt","toUpperCase","slice","useAfterUserType","setQuery","timeOut","setTimeout","clearTimeout","Text","Checkbox","checked","handleFontColorType","fontcolor","fontSize","ButtonIcon","Tr","tr","lighten","Td","td","weight","Wrapper","TableRow","onCheckClick","onDeleteClick","data-tip","table","Body","tbody","WordsTable","onWordDeleteClick","onWordCheckClick","useMemo","shouldShow","css","ScrollToTop","shouldShowButton","setShouldShowButton","handleScroll","window","pageYOffset","document","addEventListener","removeEventListener","scrollTo","top","left","behavior","StyledInput","FullWords","onCategoryDeleteclick","selectedWords","setSelectedWords","searchValue","setSearchValue","searchQuery","useHotkeys","handleAddWordShortcut","handleWordDelete","useCallback","confirm","handleCheckClick","effect","EmptyWords","Words","handleCategoryDelete","ifEqual","value1","value2","toLocaleLowerCase","Radio","StyledRadio","VocupracticeRadioBtn","text","Word","Reading","isCorrect","column","StyledVocupracticeRadioBtn","Vocupractice","vocupracticeSelector","translationCorrect","setTranslationCorrect","readingCorrect","setReadingCorrect","allCorrect","setAllCorect","readingInputRef","translationInputRef","initNewWord","categoriesId","getState","vocubularyCategories","randomKey","floor","randomCategoryKey","randomCategory","randomWordKey","resetWord","handleTypeChange","key","Practice","Message","NoFound","Logo","isMobile","useMediaQuery","InputFile","StyledButtonIcon","ImportExportBtns","inputFileRef","handleImportClick","click","handleExportClick","file","Blob","element","createElement","URL","createObjectURL","download","files","reader","FileReader","onload","json","result","categoriesKeysToCompare","wordKeysToCompare","categoryKeys","Error","wordKeys","error","readAsText","accept","Headbar","library","add","faEdit","faTrash","faFileExport","faFileImport","faSearch","faArrowUp","GlobalContainer","App","exact","path","configureStore","reducer","vocabularyReducer","vocupracticeReducer","Boolean","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyles","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.bd2f2fd8.chunk.js","sourcesContent":["const generateRandomId = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport default generateRandomId;","export const saveToLocalStorage = (name: string, data: any) => {\r\n    localStorage.setItem(name, JSON.stringify(data));\r\n}\r\n\r\nexport const loadFromLocalStorage = (name: string) => {\r\n    return localStorage.getItem(name) \r\n        ? JSON.parse(localStorage.getItem(name)!)\r\n        : undefined;\r\n}","import { store } from 'react-notifications-component';\r\n\r\ntype notificationType = \"success\" | \"danger\" | \"info\" | \"default\" | \"warning\";\r\n\r\nconst showNotification = (title: string, message: string, type: notificationType) => {\r\n    store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"bottom\",\r\n        container: \"bottom-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 3000,\r\n          onScreen: true\r\n        }\r\n    })   \r\n}\r\n\r\nexport default showNotification;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport generateRandomId from '../../helpers/generateRandomId';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nexport interface Words {\r\n    id: string;\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n}\r\n\r\nexport interface Categories {\r\n    id: string;\r\n    name: string;\r\n    words: Words[]\r\n}\r\n\r\n\r\ninterface VocabularyState {\r\n    categories: {\r\n        [key: string]: Categories\r\n    },\r\n    searchWords: Words[];\r\n}\r\n\r\nexport const initialState: VocabularyState = {\r\n    categories: {},\r\n    searchWords: []\r\n}\r\n\r\nexport const vocabularySlice = createSlice({\r\n    name: 'vocubulary',\r\n    initialState,\r\n    reducers: {\r\n        loadVocabulary: (state, action: PayloadAction<any>) => {\r\n            state.categories = action.payload;\r\n        },\r\n        createCategory: (state, action: PayloadAction<string>) => {\r\n            const randomId = generateRandomId();\r\n            \r\n            state.categories[randomId] = {\r\n                id: randomId,\r\n                name: action.payload,\r\n                words: []\r\n            }\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been created!', 'success');\r\n        },\r\n        createWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            state.categories[categoryId].words = [...state.categories[categoryId].words, word];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been added!', 'success');\r\n        },\r\n        deleteCategory: (state, action: PayloadAction<string>) => {\r\n            delete state.categories[action.payload];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been deleted!', 'success');\r\n        },\r\n        deleteWord: (state, action: PayloadAction<{categoryId: string, wordId: string, notification: boolean}>) => {\r\n            const { categoryId, wordId, notification } = action.payload;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.filter((item) => {\r\n                return item.id !== wordId;\r\n            });\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            if (notification) {\r\n                showNotification('Success', 'Word has been deleted!', 'success');\r\n            }\r\n            \r\n        },\r\n        updateWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            const selectedWord = state.categories[categoryId].words.filter((item) => {\r\n                return item.id === word.id;\r\n            })[0] = word;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                return item.id === word.id ? selectedWord : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been updated!', 'success');\r\n        },\r\n        searchWords: (state, action: PayloadAction<{query: string, categoryId: string}>) => {\r\n            const { categoryId, query } = action.payload;\r\n\r\n            if (query.trim().length === 0) {\r\n                state.searchWords = [];\r\n            } else {\r\n                const foundWords = state.categories[categoryId].words.filter((item) => {\r\n                    return item.word.includes(query) || item.translation.includes(query) || item.reading?.includes(query);\r\n                });\r\n    \r\n                state.searchWords = foundWords;\r\n            }\r\n\r\n        }\r\n    }\r\n})\r\n\r\nexport const { loadVocabulary, createCategory, createWord, deleteCategory, deleteWord, updateWord, searchWords } = vocabularySlice.actions;\r\n\r\nexport const selectVocabulary = (state: RootState) => state.vocabulary;\r\n\r\nexport default vocabularySlice.reducer;","import { DefaultTheme } from 'styled-components';\r\n\r\nconst theme: DefaultTheme = {\r\n    fontColor: \"#ffffff\",\r\n    fontColorSecondary: \"#999999\",\r\n    primary: \"#232424\",\r\n    secondary: \"#222222\",\r\n    inputBackground: \"#2C2C2C\",\r\n    buttonBorder: \"#000000\",\r\n    importColor: \"#4A7EB5\",\r\n    exportColor: \"#55AA85\",\r\n    categoryBorder: \"#1A1A1A\",\r\n    deleteColor: \"#FF0000\",\r\n    checkBackground: \"#C4C4C4\",\r\n    editColor: \"#52ADA3\",\r\n\r\n    fontSizeEm: '18px',\r\n\r\n    primaryFont: \"Rajdhani\",\r\n    secondaryFont: \"Roboto\"\r\n}\r\n\r\nexport { theme }","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { theme } from '../../theme/theme';\r\nimport { darken } from 'polished';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype backgroundColor = 'import' | 'export' | 'normal' | 'delete';\r\ntype width = 'small' | 'middle' | 'big';\r\n\r\ninterface IButton {\r\n    backgroundColor: backgroundColor;\r\n    width: width;\r\n    children: string;\r\n    href?: string;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    backgroundcolor: backgroundColor;\r\n    width: width;\r\n}\r\n\r\nconst handleColorType = (color: backgroundColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"normal\":\r\n            return theme.secondary;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst handleWidthType = (width: width) => {\r\n    switch(width) {\r\n        case 'small':\r\n            return '20px';\r\n        case 'middle':\r\n            return '40px';\r\n        case 'big':\r\n            return '50px';\r\n        default: return '20px';\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n    text-decoration: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst Button = ({backgroundColor, children, width, onClick, href, ...props}: IButton) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink backgroundcolor={backgroundColor} width={width} to={href} {...props}>\r\n                {children}\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton onClick={onClick} backgroundcolor={backgroundColor} width={width} {...props}>\r\n                {children}\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n`\r\n\r\nconst EmptyCategories = () => {\r\n    return (\r\n        <Container>\r\n            <Button href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyCategories;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\nimport { saveToLocalStorage, loadFromLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\ninterface VocupracticeState {\r\n    type: string;\r\n    reading: boolean;\r\n    categoryId: string;\r\n    selectedCategoriesId: string[];\r\n    word: Words | null;\r\n}\r\n\r\nconst initialState: VocupracticeState = {\r\n    type: 'translation',\r\n    reading: true,\r\n    categoryId: '',\r\n    selectedCategoriesId: [],\r\n    word: null\r\n}\r\n\r\nexport const vocupracticeSlice = createSlice({\r\n    name: 'vocupractice',\r\n    initialState,\r\n    reducers: {\r\n        loadVocupractice: (state) => {\r\n            const data = loadFromLocalStorage('vocupracticesettings');\r\n\r\n            if (data) {\r\n                state.type = data.type ? data.type : 'translation';\r\n                state.reading = data.reading ? data.reading : false;\r\n            }\r\n        },\r\n        setType: (state, action: PayloadAction<string>) => {\r\n            state.type = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setReading: (state, action: PayloadAction<boolean>) => {\r\n            state.reading = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setCategoryId: (state, action: PayloadAction<string>) => {\r\n            state.categoryId = action.payload;\r\n            state.selectedCategoriesId = [];\r\n        },\r\n        setSelectedCategoriesId: (state, action: PayloadAction<string[]>) => {\r\n            state.selectedCategoriesId = action.payload;\r\n            state.categoryId = '';\r\n        },\r\n        setWord: (state, action: PayloadAction<Words | null>) => {\r\n            state.word = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const loadRandomWordFromCategory = (category: string): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    if (!vocubularyCategories[category]) {\r\n        return false;\r\n    }\r\n\r\n    const words = vocubularyCategories[category].words;\r\n    const randomKey = Math.floor(Math.random() * words.length);\r\n\r\n    dispatch(setWord(words[randomKey]))\r\n}\r\n\r\nexport const loadRandomWordFromMultipleCategories = (categoriesId: string[]): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    let randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n    let randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n\r\n    if (!randomCategory) {\r\n        return false;\r\n    }\r\n\r\n    while (randomCategory.words.length === 0) {\r\n        randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n        randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n    }\r\n\r\n    const randomWordKey = Math.floor(Math.random() * randomCategory.words.length);\r\n\r\n    dispatch(setWord(randomCategory.words[randomWordKey]));\r\n}\r\n\r\nexport const { loadVocupractice, setType, setReading, setSelectedCategoriesId, setCategoryId, setWord } = vocupracticeSlice.actions;\r\n\r\nexport const selectVocupractice = (state: RootState) => state.vocupractice;\r\n\r\nexport default vocupracticeSlice.reducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { darken } from 'polished';\r\n\r\ninterface ICategoryBlocks {\r\n    name: string;\r\n    href: string;\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    width: 120px;\r\n    height: 120px;\r\n    border: 2px solid ${({theme}) => theme.categoryBorder};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.1em;\r\n    display: block;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: background .3s;\r\n    word-break: break-word;\r\n    overflow-wrap: break-word;\r\n    text-align: center;\r\n    padding: 5px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.020, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 825px) {\r\n        margin: auto;\r\n    }\r\n`\r\n\r\nconst CategoryBlock = ({name, href}: ICategoryBlocks) => {\r\n    return (\r\n        <StyledLink to={href}>\r\n            {name}\r\n        </StyledLink>\r\n    );\r\n};\r\n\r\nexport default CategoryBlock;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { selectVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { setSelectedCategoriesId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport CategoryBlock from '../atoms/CategoryBlock';\r\n\r\nconst Container = styled.div`\r\n    width: 560px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst WrapperButtons = styled.div`\r\n    display: flex;\r\n    width: auto;\r\n\r\n    @media (max-width: 600px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nconst WrapperCategories = styled.div`\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    margin-top: 20px;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    &:first-of-type {\r\n        margin-left: 0;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        margin: 10px 0px;\r\n    }\r\n\r\n    @media (max-width: 360px) {\r\n        padding: 0;\r\n        width: 200px;\r\n    }\r\n`\r\n\r\nconst FullCategories = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handlePracticeAllClick = () => {\r\n        let isAnyCategoryEmpty: string[] = [];\r\n        Object.keys(vocabularySelector.categories).forEach((item) => {\r\n            const category = vocabularySelector.categories[item];\r\n\r\n            if (category.words.length === 0) {\r\n                isAnyCategoryEmpty.push(category.id);\r\n                return false;\r\n            } \r\n        })\r\n\r\n        if (isAnyCategoryEmpty.length === Object.keys(vocabularySelector.categories).length) {\r\n            alert('All your categories are empty!');\r\n            return false;\r\n        }\r\n\r\n        dispatch(setSelectedCategoriesId(Object.keys(vocabularySelector.categories)));\r\n    \r\n        history.push('/practice');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <WrapperButtons>\r\n                <StyledButton href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</StyledButton>\r\n                <StyledButton onClick={handlePracticeAllClick} backgroundColor=\"normal\" width=\"small\">Practice all</StyledButton>\r\n            </WrapperButtons>\r\n            <WrapperCategories>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        return (\r\n                            <CategoryBlock key={category.id} href={`/category/${category.id}`} name={category.name} />\r\n                        )\r\n                    })\r\n                }\r\n            </WrapperCategories>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullCategories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype size = 'small' | 'big';\r\n\r\ninterface IPageTitle {\r\n    size: size;\r\n    children: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface TitleProps {\r\n    size: size;\r\n}\r\n\r\nconst Title = styled.span<TitleProps>`\r\n    font-size: ${({size}) => size === 'small' ? '2em' : '3em'};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    padding: 0;\r\n    margin: 0;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n    text-align: center;\r\n    display: block;\r\n`\r\n\r\nconst PageTitle = ({size, children, ...props}: IPageTitle) => {\r\n    return (\r\n        <Title size={size} {...props}>\r\n            {children}\r\n        </Title>\r\n    );\r\n};\r\n\r\nexport default PageTitle;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\ninterface ITitle {\r\n    title?: string;\r\n    length?: number;\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-bottom: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: 1160px) {\r\n        padding-bottom: 20px;\r\n    }\r\n`\r\n\r\nconst WordsLengthContainer = styled.div`\r\n    background: ${({theme}) => darken(0.05, theme.secondary)};\r\n    padding: 0px 5px;\r\n    border-radius: 10px;\r\n    margin-left: 8px;\r\n`\r\n\r\nconst WordsLength = styled.div`\r\n    font-size: 2em;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    user-select: none;\r\n`\r\n\r\nconst Title = ({title, length}: ITitle) => {\r\n    return (\r\n        <Container>\r\n            <PageTitle size=\"small\">{title ? title : `\\u00a0\\u00a0`}</PageTitle>\r\n            { length && \r\n                <WordsLengthContainer>\r\n                    <WordsLength>{length}</WordsLength> \r\n                </WordsLengthContainer>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport EmptyCategories from '../components/organisms/EmptyCategories';\r\nimport FullCategories from '../components/organisms/FullCategories';\r\nimport Title from '../components/molecules/Title';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Categories = () => {\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Vocupractice</title>\r\n            </Helmet>\r\n            <Title />\r\n            {\r\n                Object.keys(vocabularySelector.categories).length > 0 ? <FullCategories /> : <EmptyCategories />\r\n            }\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default Categories;","import React, { forwardRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\ninterface IInput {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    value: string;\r\n    labelText?: string;\r\n    placeholder?: string;\r\n    iconType?: any;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    label?: string;\r\n}\r\n\r\ninterface InputProps {\r\n    iconType?: string;\r\n}\r\n\r\nconst Container = styled.label<ContainerProps>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.4em;\r\n    width: 280px;\r\n    height: ${({label}) => label ? '82px' : '50px'};\r\n    position: relative;\r\n`\r\n\r\nconst LabelText = styled.span`\r\n    padding-left: 5px;\r\n`\r\n\r\nconst ContainerInput = styled.input<InputProps>`\r\n    background: ${({theme}) => theme.inputBackground};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    border: none;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: ${({iconType}) => iconType ? '0px 60px' : '0px 10px'};\r\n    font-size: 1em;\r\n    outline: none;\r\n    \r\n    &::placeholder {\r\n        color: ${({theme}) => theme.fontColorSecondary};\r\n        font-style: italic;\r\n        font-size: 0.6em;\r\n    }\r\n`\r\n\r\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 12px;\r\n`\r\n\r\nconst Input = forwardRef<HTMLInputElement, IInput>((props, ref) => {\r\n    const { onChange, onKeyDown, value, labelText, placeholder, iconType, ...restProps } = props;\r\n    return (\r\n        <Container label={labelText} {...restProps}>\r\n            { labelText && <LabelText>{labelText}</LabelText> }\r\n            { iconType && <StyledFontAwesomeIcon icon={iconType} /> }\r\n            <ContainerInput iconType={iconType} ref={ref} placeholder={placeholder} value={value} onKeyDown={onKeyDown} onChange={onChange} />\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Input from '../atoms/Input';\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IAddCategory {\r\n    onSubmit: (categoryName: string) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 140px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddCategory = ({onSubmit}: IAddCategory) => {\r\n    const [categoryName, setCategoryName] = useState('');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCategoryName(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        \r\n        if (categoryName.trim().length > 0) {\r\n            onSubmit(categoryName);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input labelText=\"Category name\" value={categoryName} onChange={handleInputChange} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, createCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddCategory from '../components/molecules/AddCategory';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst CategoryForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handleSubmit = (categoryName: string) => {\r\n        if (vocabularySelector.categories[categoryName]) {\r\n            alert('Category already exists');\r\n            return false;\r\n        }\r\n\r\n        dispatch(createCategory(categoryName));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Add category - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title=\"Add category\" />\r\n            <AddCategory onSubmit={handleSubmit} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","import { Categories } from '../features/vocabulary/vocabularySlice';\r\n\r\nconst findWordById = (category: Categories, wordId: string) => {\r\n    if (category.words) {\r\n        return category.words.filter((item) => {\r\n            return item.id === wordId;\r\n        })\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default findWordById;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IAddEditWordForm {\r\n    type: formType;\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 325px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddEditWordForm = ({type, id, word, translation, reading, onSubmit}: IAddEditWordForm) => {\r\n    const [wordValue, setWordValue] = useState('');\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const InputWordRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (InputWordRef && InputWordRef.current) {\r\n            InputWordRef.current.focus();\r\n        }\r\n    }, [InputWordRef]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setWordValue(word!);\r\n            setTranslationValue(translation!);\r\n            setReadingValue(reading!);\r\n        }\r\n    }, [id, word, translation, reading]);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (wordValue && translationValue) {\r\n            if (wordValue.trim().length !== 0 && translationValue.trim().length !== 0) {\r\n                onSubmit(e, wordValue, translationValue, readingValue);\r\n            }  \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input ref={InputWordRef} value={wordValue} labelText=\"Word\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setWordValue(e.target.value)} />\r\n            <Input value={translationValue} labelText=\"Translation\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTranslationValue(e.target.value)} />\r\n            <Input value={readingValue} placeholder=\"Leave empty if not needed\" labelText=\"Reading\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setReadingValue(e.target.value)} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">{`${type} word`}</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddEditWordForm;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Redirect, useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport generateRandomId from '../helpers/generateRandomId';\r\nimport findWordById from '../helpers/findWordById';\r\n\r\nimport { selectVocabulary, createWord, updateWord } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddEditWordForm from '../components/organisms/AddEditWordForm';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IWordForm {\r\n    type: formType;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\ninterface editDataInterface {\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n}\r\n\r\nconst WordForm = ({type}: IWordForm) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { wordId, categoryId } = useParams<{ categoryId: string, wordId: string }>();\r\n    const [ editData, setEditData ] = useState<editDataInterface>({\r\n        id: undefined,\r\n        word: undefined,\r\n        translation: undefined,\r\n        reading: undefined\r\n    })\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => {\r\n        if (type === 'add') {\r\n            dispatch(createWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: generateRandomId(),\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading\r\n                }\r\n            }))\r\n        } else {\r\n            dispatch(updateWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: editData.id!,\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading\r\n                }\r\n            }))\r\n        }\r\n\r\n        history.push(`/category/${categoryId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (type === 'edit' && vocabularySelector.categories[categoryId]) {\r\n            const word = findWordById(vocabularySelector.categories[categoryId], wordId);\r\n\r\n            setEditData(word[0]);\r\n        }\r\n    }, [type, vocabularySelector.categories, wordId, categoryId]);\r\n\r\n    if (type === 'add' && !vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (type === 'edit' && ( !vocabularySelector.categories[categoryId] || findWordById(vocabularySelector.categories[categoryId], wordId).length === 0) ) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{type.charAt(0).toUpperCase() + type.slice(1)} word - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title={`${type.toUpperCase()} word`} />\r\n            {\r\n                type === 'add' ? (\r\n                    <AddEditWordForm onSubmit={handleSubmit} type={type}/>\r\n                ) : (\r\n                    <AddEditWordForm {...editData} onSubmit={handleSubmit} type={type}/>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WordForm;","import { useState, useEffect } from 'react';\r\n\r\nconst useAfterUserType = (value: string) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        const timeOut = setTimeout(() => {\r\n            setQuery(value);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeOut);\r\n    }, [value]);\r\n\r\n    return query;\r\n}\r\n\r\nexport default useAfterUserType;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICheckbox {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    label?: string;\r\n    checked?: boolean;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n` \r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst Input = styled.input`\r\n    transform: scale(1.7);\r\n`\r\n\r\nconst Checkbox = ({onChange, label, checked}: ICheckbox) => {\r\n    if (label) {       \r\n        return (\r\n            <Container>\r\n                <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n                <Text>{label}</Text>\r\n            </Container>\r\n        )\r\n    } else {        \r\n        return (\r\n            <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Link } from 'react-router-dom';\r\nimport { theme } from '../../theme/theme';\r\n\r\ntype fontColor = 'edit' | 'delete' | 'export' | 'import' | 'white' ;\r\n\r\ninterface IButtonIcon {\r\n    fontColor: fontColor;\r\n    iconType: any;\r\n    onClick?: () => void;\r\n    href?: string;\r\n    fontSize?: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    fontcolor: fontColor;\r\n    fontSize?: string;\r\n}\r\n\r\nconst handleFontColorType = (color: fontColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"edit\":\r\n            return theme.editColor;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        case \"white\":\r\n            return theme.fontColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({fontcolor}) => handleFontColorType(fontcolor)};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme, fontcolor}) => fontcolor === 'edit' ? theme.editColor : theme.deleteColor};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ButtonIcon = ({fontColor, iconType, onClick, href, fontSize, ...props}: IButtonIcon) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink fontSize={fontSize} to={href} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton fontSize={fontSize} onClick={onClick} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ButtonIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { lighten } from 'polished';\r\n\r\nimport Checkbox from './Checkbox';\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\ninterface ITableRow {\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    onCheckClick: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onDeleteClick: () => void;\r\n    wordId: string;\r\n    categoryId: string;\r\n}\r\n\r\ninterface TableDataProps {\r\n    weight?: number;\r\n}\r\n\r\nconst Tr = styled.tr`\r\n    height: 60px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        aling-items: center;\r\n        margin: 10px 0px;\r\n        height: auto;\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\nconst Td = styled.td<TableDataProps>`\r\n    font-weight: ${({weight}) => weight ? weight : '300'};\r\n\r\n    &:first-child {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        text-align: center;\r\n        \r\n        &:first-child {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n`\r\n\r\nconst TableRow = ({word, translation, reading, onCheckClick, onDeleteClick, wordId, categoryId}: ITableRow) => {\r\n    return (\r\n        <Tr>\r\n            <Td weight={600}>\r\n                {word}\r\n            </Td>\r\n            <Td>\r\n                {translation}\r\n            </Td>\r\n            <Td>\r\n                {\r\n                    reading ? reading : '\\u00a0\\u00a0'\r\n                }\r\n            </Td>\r\n            <Td>\r\n                <Wrapper>\r\n                    <ButtonIcon data-tip=\"edit word\" href={`/category/${categoryId}/edit/${wordId}`} iconType=\"edit\" fontColor=\"edit\" />\r\n                    <Checkbox onChange={onCheckClick} />\r\n                    <ButtonIcon data-tip=\"remove word\" onClick={onDeleteClick} iconType=\"trash\" fontColor=\"delete\" />\r\n                </Wrapper>\r\n            </Td>\r\n        </Tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\nimport TableRow from '../atoms/TableRow';\r\n\r\ninterface IWordsTable {\r\n    words: Words[];\r\n    categoryId: string;\r\n    onWordDeleteClick: (wordId: string) => void;\r\n    onWordCheckClick: (wordId: string, checked: boolean) => void;\r\n}\r\n\r\nconst Container = styled.table`\r\n    width: 100%;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    font-size: 1.2em;\r\n    border-collapse: collapse;\r\n`\r\n\r\nconst Body = styled.tbody``\r\n\r\nconst WordsTable = ({words, categoryId, onWordDeleteClick, onWordCheckClick}: IWordsTable) => {\r\n    return useMemo(() => {\r\n        return (\r\n            <Container>\r\n                <Body>\r\n                    {\r\n                        words.map((item) => {\r\n                            return (\r\n                                <TableRow key={item.id} categoryId={categoryId} wordId={item.id} word={item.word} translation={item.translation} reading={item.reading} onCheckClick={(e) => onWordCheckClick(item.id, e.target.checked)} onDeleteClick={() => onWordDeleteClick(item.id)} />\r\n                            )\r\n                        })\r\n                    }\r\n                </Body>\r\n            </Container>\r\n        );\r\n    }, [words, categoryId, onWordCheckClick, onWordDeleteClick]);\r\n\r\n};\r\n\r\nexport default WordsTable;","import React, { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\ninterface ContainerProps {\r\n    shouldShow: boolean;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 50px;\r\n    height: 50px;\r\n    position: fixed;\r\n    right: 20%;\r\n    bottom: 60px;\r\n    opacity: 0;\r\n    visibility: 0;\r\n    z-index: 99;\r\n    transition: opacity .3s ease-in-out;\r\n    background: ${({theme}) => theme.secondary};\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    transition: background .3s;\r\n\r\n    ${({shouldShow}) => shouldShow && css`\r\n        opacity: 1;\r\n        visibility: 1;\r\n    `}\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(\"0.050\", theme.secondary)};\r\n    }\r\n\r\n    @media (max-width: 1750px) {\r\n        right: 60px;\r\n    }\r\n`\r\n\r\nconst ScrollToTop = () => {\r\n    const [shouldShowButton, setShouldShowButton] = useState(false);\r\n\r\n    const handleScroll = () => {\r\n        if (window.pageYOffset >= 600) {\r\n            setShouldShowButton(true);\r\n        } else {\r\n            setShouldShowButton(false);\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', handleScroll);\r\n\r\n        return () => document.removeEventListener('scroll', handleScroll);\r\n    }, [])\r\n\r\n    return (\r\n        <Container shouldShow={shouldShowButton}>\r\n            <ButtonIcon onClick={handleClick} fontSize=\"1.8em\" iconType=\"arrow-up\" fontColor=\"white\" />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ScrollToTop;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport useAfterUserType from '../../hooks/useAfterUserType';\r\n\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport { selectVocabulary, deleteWord, searchWords } from '../../features/vocabulary/vocabularySlice';\r\nimport { setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport WordsTable from '../molecules/WordsTable';\r\nimport Input from '../atoms/Input';\r\nimport ScrollToTop from '../molecules/ScrollToTop';\r\n\r\ninterface IFullWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    width: 900px;\r\n    position: relative;\r\n\r\n    @media (max-width: 930px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width: 930px) {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-gap: 20px;\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    @media (max-width: 717px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst FullWords = ({categoryId, onCategoryDeleteclick}: IFullWords) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [selectedWords, setSelectedWords] = useState<{[key: string]: boolean}>({});\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const searchQuery = useAfterUserType(searchValue);\r\n\r\n    useHotkeys('ctrl+a', (e) => handleAddWordShortcut(e));\r\n\r\n    const handleAddWordShortcut = (e: KeyboardEvent) => {\r\n        e.preventDefault();\r\n        history.push(`/category/${categoryId}/add`);\r\n    }\r\n\r\n    const handleWordDelete = useCallback((wordId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this word?')) {\r\n            dispatch(deleteWord({\r\n                categoryId: categoryId,\r\n                wordId: wordId,\r\n                notification: true\r\n            }))\r\n        }\r\n    }, [categoryId, dispatch]);\r\n\r\n    const handleCheckClick = useCallback((wordId: string, checked: boolean) => {\r\n        setSelectedWords({...selectedWords, [wordId]: checked});\r\n    }, [selectedWords]);\r\n\r\n    const handleDeleteSelected = () => {\r\n        if (window.confirm('Are you sure you want to delete all selected words?')) {\r\n            Object.keys(selectedWords).map((id) => {\r\n                const isChecked = selectedWords[id];\r\n\r\n                if (!isChecked) {\r\n                    return false;\r\n                }\r\n\r\n                return dispatch(deleteWord({\r\n                    categoryId: categoryId,\r\n                    wordId: id,\r\n                    notification: false\r\n                }))\r\n            })\r\n\r\n            showNotification('Success!', 'Selected words has been deleted!', 'success');\r\n        }\r\n    }\r\n\r\n    const handlePracticeClick = () => {\r\n        dispatch(setCategoryId(categoryId));\r\n\r\n        history.push('/practice');\r\n    }\r\n\r\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(searchWords({query: searchQuery, categoryId}))\r\n    }, [searchQuery, categoryId, dispatch]);\r\n\r\n    if (!vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <ScrollToTop />\r\n            <Wrapper>\r\n                <StyledButton onClick={handlePracticeClick} backgroundColor=\"normal\" width=\"small\">Practice</StyledButton>\r\n                <StyledButton data-tip=\"(ctrl + a)\" href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n                <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n                <StyledButton onClick={handleDeleteSelected} backgroundColor=\"delete\" width=\"small\">Delete selected</StyledButton>\r\n            </Wrapper>\r\n            <StyledInput iconType=\"search\" onChange={handleSearchChange} value={searchValue} />\r\n            <WordsTable categoryId={categoryId} onWordCheckClick={handleCheckClick} onWordDeleteClick={handleWordDelete} words={vocabularySelector.searchWords.length === 0 ? vocabularySelector.categories[categoryId].words : vocabularySelector.searchWords} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IEmptyWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    @media (max-width: 825px) {\r\n        margin: 10px 0px;\r\n    }    \r\n`\r\n\r\nconst EmptyWords = ({categoryId, onCategoryDeleteclick}: IEmptyWords) => {\r\n    return (\r\n        <Container>\r\n            <StyledButton href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n            <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, deleteCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport FullWords from '../components/organisms/FullWords'\r\nimport EmptyWords from '../components/organisms/EmptyWords';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Words = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const handleCategoryDelete = (categoryId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this category?')) {\r\n            dispatch(deleteCategory(categoryId));\r\n        }\r\n    }\r\n\r\n    if (!vocabularySelector.categories[id]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{vocabularySelector.categories[id].name.charAt(0).toUpperCase() + vocabularySelector.categories[id].name.slice(1)} - Vocupractice</title>\r\n            </Helmet>\r\n            <Title length={vocabularySelector.categories[id].words.length && vocabularySelector.categories[id].words.length} title={`Category / ${vocabularySelector.categories[id].name}`} />\r\n            {\r\n                vocabularySelector.categories[id].words.length > 0 ? <FullWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} /> : <EmptyWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} />\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Words;","const ifEqual = (value1: string, value2: string) => {\r\n    if (value1.toLocaleLowerCase() === value2.toLocaleLowerCase()) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default ifEqual;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IRadio {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.input`\r\n    transform: scale(1.1);\r\n    margin: 0;\r\n`\r\n\r\nconst Radio = ({onChange, name, checked, ...props}: IRadio) => {\r\n    return (\r\n        <Container checked={checked} type=\"radio\" name={name} onChange={onChange} {...props} />\r\n    );\r\n};\r\n\r\nexport default Radio;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Radio from '../atoms/Radio';\r\n\r\ninterface IVocupracticeRadioBtn {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    text: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledRadio = styled(Radio)`\r\n    position: relative;\r\n    bottom: 1px;\r\n`\r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst VocupracticeRadioBtn = ({onChange, name, checked, text, ...props}: IVocupracticeRadioBtn) => {\r\n    return (\r\n        <Container {...props}>\r\n            <StyledRadio checked={checked} onChange={onChange} name={name} />\r\n            <Text>{text}</Text>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default VocupracticeRadioBtn;","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { selectVocupractice, loadVocupractice, setType, setReading, loadRandomWordFromCategory, loadRandomWordFromMultipleCategories, setWord } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport ifEqual from '../../helpers/ifEqual';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport VocupracticeRadioBtn from '../molecules/VocupracticeRadioBtn';\r\n\r\ninterface WrapperProps {\r\n    column?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n    isCorrect: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    align-items: center;\r\n`\r\n\r\nconst Word = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    text-align: center;\r\n`\r\n\r\nconst Reading = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColorSecondary};\r\n    font-size: 1.1em;\r\n    text-align: center;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst StyledInput = styled(Input)<InputProps>`\r\n    margin: 5px 0px;\r\n    \r\n    & > input {\r\n        transition: background .3s ease-in-out;\r\n    }\r\n\r\n    ${({isCorrect}) => isCorrect && css`\r\n        & > input {\r\n            background: #33F633;\r\n            pointer-events: none;\r\n        }\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n    display: flex;\r\n    margin: 5px 0px;\r\n\r\n    ${({column}) => column && css`\r\n        flex-direction: column;\r\n    `}\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    font-size: 0.7em;\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledVocupracticeRadioBtn = styled(VocupracticeRadioBtn)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst Vocupractice = () => {\r\n    const dispatch = useDispatch();\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const [translationCorrect, setTranslationCorrect] = useState('');\r\n    const [readingCorrect, setReadingCorrect] = useState('');\r\n    const [allCorrect, setAllCorect] = useState(false);\r\n\r\n    const readingInputRef = useRef<HTMLInputElement>(null);\r\n    const translationInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const initNewWord = useCallback(() => {\r\n        if (vocupracticeSelector.categoryId !== '') {\r\n            dispatch(loadRandomWordFromCategory(vocupracticeSelector.categoryId));\r\n        } else {\r\n            dispatch(loadRandomWordFromMultipleCategories(vocupracticeSelector.selectedCategoriesId));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadVocupractice());\r\n\r\n        initNewWord();\r\n\r\n        return () => {\r\n            dispatch(setWord(null));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId, initNewWord])\r\n\r\n    useEffect(() => {\r\n        if (translationCorrect === 'true' && readingCorrect === 'true') {\r\n            setAllCorect(true);\r\n        }\r\n    }, [translationCorrect, readingCorrect])\r\n\r\n    const handleTranslationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (translationCorrect !== 'true') {\r\n            setTranslationValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleReadingChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (readingCorrect !== 'true') {\r\n            setReadingValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleTranslationCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && (e.key === 'Enter' || e.key === 'Tab')) {\r\n            if (!vocupracticeSelector.word.reading) {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n\r\n                    if (vocupracticeSelector.type !== 'both') {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (vocupracticeSelector.type === 'both' && e.key !== 'Tab') {\r\n                readingInputRef.current && readingInputRef.current.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReadingCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && e.key === 'Enter') {\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                    setReadingCorrect('true');\r\n\r\n                    if (translationCorrect !== 'true') {\r\n                        if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                            setTranslationCorrect('true');\r\n                        }\r\n                    }\r\n\r\n                    if (vocupracticeSelector.type === 'reading') {\r\n                        setTranslationCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCheckClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                setTranslationCorrect('true');\r\n            }\r\n\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') {\r\n                    if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                } else {\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                setReadingCorrect('true');\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetWord = () => {\r\n        setTranslationValue('');\r\n        setReadingValue('');\r\n        setTranslationCorrect('');\r\n        setReadingCorrect('');\r\n        setAllCorect(false);\r\n    }\r\n\r\n    const handleNextClick = () => {\r\n        resetWord();\r\n\r\n        initNewWord();\r\n    }\r\n\r\n    const handleAnswerClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            setTranslationValue(vocupracticeSelector.word.translation);\r\n            setReadingValue(vocupracticeSelector.word.reading ? vocupracticeSelector.word.reading : '');\r\n            setTranslationCorrect('true');\r\n            setReadingCorrect('true');\r\n        }\r\n    }\r\n\r\n    const handleVocupracticeKeyEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter' && allCorrect) {\r\n            resetWord();\r\n\r\n            initNewWord();\r\n\r\n            translationInputRef.current!.focus();\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type: string) => {\r\n        dispatch(setType(type));\r\n\r\n        resetWord();\r\n    }\r\n\r\n    const handleReadingCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setReading(e.target.checked));\r\n    }\r\n\r\n    if (vocupracticeSelector.categoryId === '' && vocupracticeSelector.selectedCategoriesId.length === 0) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (!vocupracticeSelector.word) {\r\n        return (\r\n            <Container />\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <Container onKeyDown={handleVocupracticeKeyEnter}>\r\n            <Word>{vocupracticeSelector.word.word}</Word>\r\n            {vocupracticeSelector.reading && vocupracticeSelector.word.reading && <Reading>{`(${vocupracticeSelector.word.reading})`}</Reading>}\r\n            {(vocupracticeSelector.type === 'translation' || vocupracticeSelector.type === 'both') ? <StyledInput isCorrect={translationCorrect === 'true' ? true : false} ref={translationInputRef} placeholder=\"Translation\" onKeyDown={handleTranslationCheck} onChange={handleTranslationChange} value={translationValue} /> : ''}\r\n            {(vocupracticeSelector.word.reading && ( vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') ) ? <StyledInput isCorrect={readingCorrect === 'true' ? true : false} ref={readingInputRef} placeholder=\"Reading\" onKeyDown={handleReadingCheck} onChange={handleReadingChange} value={readingValue} /> : ''}\r\n            <Wrapper>\r\n                <StyledButton onClick={handleAnswerClick} backgroundColor=\"normal\" width=\"small\">Answer</StyledButton>\r\n                <StyledButton onClick={handleNextClick} backgroundColor=\"normal\" width=\"small\">Next</StyledButton>\r\n                <StyledButton onClick={handleCheckClick} backgroundColor=\"normal\" width=\"small\">Check</StyledButton>\r\n            </Wrapper>\r\n            {\r\n                vocupracticeSelector.word.reading && (\r\n                    <Wrapper column>\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'translation'} text=\"translation\" name=\"type\" onChange={() => handleTypeChange('translation')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'reading'} text=\"reading\" name=\"type\" onChange={() => handleTypeChange('reading')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'both'} text=\"both\" name=\"type\" onChange={() => handleTypeChange('both')} />\r\n                    </Wrapper>\r\n                )\r\n            }\r\n            {vocupracticeSelector.word.reading && <Checkbox checked={vocupracticeSelector.reading} label=\"show reading\" onChange={handleReadingCheckbox} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Vocupractice;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport Vocupractice from '../components/organisms/Vocupractice';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Practice = () => {\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Practice - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title=\"Practice / verbs\" />\r\n            <Vocupractice />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Practice;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Message = styled.span`\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    user-select: none;\r\n`\r\n\r\nconst NoFound = () => {\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>404 - Vocupractice</title>\r\n            </Helmet>\r\n            <Message>Hey! It looks like you're lost!</Message>\r\n            <Message>Click on vocupractice logo to go back :)</Message>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NoFound;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\nconst Container = styled.div`\r\n    margin-right: auto;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n`\r\n\r\nconst Logo = () => {\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 470px)'\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <StyledLink to=\"/\">\r\n                <PageTitle size={isMobile ? 'small' : 'big'}>Vocupractice</PageTitle>\r\n            </StyledLink>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { selectVocabulary, loadVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport Button from '../atoms/Button';\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n`\r\n\r\nconst InputFile = styled.input`\r\n    display: none;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledButtonIcon = styled(ButtonIcon)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst ImportExportBtns = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 825px)'\r\n    });\r\n    const inputFileRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleImportClick = () => {\r\n        if (inputFileRef.current) {\r\n            inputFileRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleExportClick = () => {\r\n        const file = new Blob([JSON.stringify(vocabularySelector.categories)], {type: 'text/plain'});\r\n        const element = document.createElement('a');\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'vocupractice.txt';\r\n        element.click();\r\n        showNotification('Success', 'Your data has been exported', 'success');\r\n    }\r\n\r\n    const handleFileImport = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const file = e.target.files[0];\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                if (e.target) {\r\n                    try {\r\n                        const json = JSON.parse(e.target.result as string);\r\n\r\n                        const categoriesKeysToCompare = ['id', 'name', 'words'];\r\n                        const wordKeysToCompare = ['id', 'word', 'translation', 'reading'];\r\n\r\n                        Object.keys(json).forEach((item) => {\r\n                            const category = json[item];\r\n                            const categoryKeys = Object.keys(category);\r\n\r\n                            if (JSON.stringify(categoryKeys) !== JSON.stringify(categoriesKeysToCompare)) {\r\n                                throw Error('Not vocupractice file');\r\n                            }\r\n\r\n                            Object.keys(category.words).forEach((item) => {\r\n                                const word = category.words[item];\r\n                                const wordKeys = Object.keys(word);\r\n\r\n                                if (JSON.stringify(wordKeys) !== JSON.stringify(wordKeysToCompare)) {\r\n                                    throw Error('Not vocupractice file');\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        dispatch(loadVocabulary(json));\r\n                        saveToLocalStorage('vocupractice', json);\r\n                        showNotification('Success', 'Data has been imported!', 'success');\r\n                    } catch (error) {\r\n                        showNotification('Error', 'This is not a valid vocupractice file!', 'danger');\r\n                        inputFileRef.current!.value = '';\r\n                    }\r\n                }\r\n            }\r\n            file && reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputFile onChange={handleFileImport} ref={inputFileRef} type=\"file\" accept=\".txt\" />\r\n            {\r\n                isMobile ? (\r\n                    <>\r\n                        <StyledButtonIcon data-tip=\"import\" fontSize=\"1.5em\" fontColor=\"import\" iconType=\"file-import\" onClick={handleImportClick}/>\r\n                        <StyledButtonIcon data-tip=\"export\" fontSize=\"1.5em\" fontColor=\"export\" iconType=\"file-export\" onClick={handleExportClick}/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <StyledButton backgroundColor=\"import\" width=\"big\" onClick={handleImportClick}>Import</StyledButton>\r\n                        <StyledButton backgroundColor=\"export\" width=\"big\" onClick={handleExportClick}>Export</StyledButton>\r\n                    </>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ImportExportBtns;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport Logo from '../molecules/Logo';\r\nimport ImportExportBtsn from '../molecules/ImportExportBtns';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n\r\n    @media (max-width: 470px) {\r\n        padding: 10px 10px;\r\n    }\r\n`\r\n\r\nconst Headbar = () => {\r\n    return (\r\n        <Container>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <Logo />\r\n            <ImportExportBtsn />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Headbar;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faEdit, faTrash, faFileImport, faFileExport, faSearch, faArrowUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { useDispatch } from 'react-redux';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\n\r\nimport { loadVocabulary } from './features/vocabulary/vocabularySlice';\r\n\r\nimport { loadFromLocalStorage } from './helpers/localStorageHandler';\r\n\r\nimport Categories from './pages/Categories';\r\nimport CategoryForm from './pages/CategoryForm';\r\nimport WordForm from './pages/WordForm';\r\nimport Words from './pages/Words';\r\nimport Practice from './pages/Practice';\r\nimport NoFound from './pages/NoFound';\r\nimport Headbar from './components/organisms/Headbar';\r\n\r\nlibrary.add(faEdit, faTrash, faFileExport, faFileImport, faSearch, faArrowUp);\r\n\r\nconst GlobalContainer = styled.div`\r\n\twidth: 100%;\r\n\tmin-height: 100vh;\r\n\tfont-size: ${({theme}) => theme.fontSizeEm};\r\n\tbackground: ${({theme}) => theme.primary};\r\n\tpadding: 50px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst data = loadFromLocalStorage('vocupractice');\r\n\r\n\t\tif (data) {\r\n\t\t\tdispatch(loadVocabulary(data));\r\n\t\t}\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ReactNotification />\r\n\t\t\t<GlobalContainer>\r\n\t\t\t\t<Headbar />\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<Categories />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/addcategory\">\r\n\t\t\t\t\t\t<CategoryForm />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/add\">\r\n\t\t\t\t\t\t<WordForm type=\"add\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/edit/:wordId\">\r\n\t\t\t\t\t\t<WordForm type=\"edit\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:id\">\r\n\t\t\t\t\t\t<Words />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/practice\">\r\n\t\t\t\t\t\t<Practice />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"*\">\r\n\t\t\t\t\t\t<NoFound />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</GlobalContainer>\r\n\t\t</>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport vocabularyReducer from '../features/vocabulary/vocabularySlice';\r\nimport vocupracticeReducer from '../features/vocupractice/vocupracticeSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tvocabulary: vocabularyReducer,\r\n\t\tvocupractice: vocupracticeReducer\r\n\t},\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n\tReturnType,\r\n\tRootState,\r\n\tunknown,\r\n\tAction<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n    \r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n        monospace;\r\n    }\r\n\r\n    *,\r\n    *::after,\r\n    *::before {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6,\r\n    p,\r\n    ol,\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme/theme';\r\nimport GlobalStyles from './theme/GlobalStyles';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n    \t<Provider store={store}>\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t\t<GlobalStyles />\r\n\t\t\t\t<HashRouter>\r\n      \t\t\t\t<App />\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</ThemeProvider>\r\n    \t</Provider>\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}