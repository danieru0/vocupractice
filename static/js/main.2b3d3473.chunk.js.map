{"version":3,"sources":["helpers/generateRandomId.tsx","helpers/localStorageHandler.tsx","helpers/showNotification.tsx","features/vocabulary/vocabularySlice.ts","theme/theme.tsx","components/atoms/Button.tsx","components/organisms/EmptyCategories.tsx","features/vocupractice/vocupracticeSlice.ts","components/atoms/CategoryBlock.tsx","components/atoms/Checkbox.tsx","components/molecules/ContextMenu.tsx","components/organisms/FullCategories.tsx","components/atoms/PageTitle.tsx","components/molecules/Title.tsx","pages/Categories.tsx","components/atoms/Input.tsx","components/molecules/AddCategory.tsx","pages/CategoryForm.tsx","helpers/findWordById.tsx","components/organisms/AddEditWordForm.tsx","pages/WordForm.tsx","features/modal/modalSlice.tsx","hooks/useAfterUserType.tsx","components/atoms/ButtonIcon.tsx","components/atoms/TableRow.tsx","components/molecules/WordsTable.tsx","components/molecules/ScrollToTop.tsx","components/molecules/DropDownMenu.tsx","components/organisms/FullWords.tsx","components/organisms/EmptyWords.tsx","pages/Words.tsx","helpers/ifEqual.tsx","components/atoms/Radio.tsx","components/molecules/VocupracticeRadioBtn.tsx","components/organisms/Vocupractice.tsx","pages/Practice.tsx","pages/NoFound.tsx","components/molecules/Logo.tsx","components/molecules/ImportExportBtns.tsx","components/organisms/Headbar.tsx","components/molecules/ModalMove.tsx","components/organisms/ModalContainer.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme/GlobalStyles.tsx","index.tsx"],"names":["generateRandomId","Math","random","toString","substr","saveToLocalStorage","name","data","localStorage","setItem","JSON","stringify","loadFromLocalStorage","getItem","parse","undefined","showNotification","title","message","type","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","vocabularySlice","createSlice","initialState","categories","searchWords","reducers","loadVocabulary","state","action","payload","createCategory","randomId","id","words","current","createWord","categoryId","word","deleteCategory","deleteWord","wordId","notification","filter","item","updateWord","map","query","trim","length","foundWords","includes","translation","reading","setImportant","important","wordWithImportant","push","importantItem","setImportantSearched","moveWord","categoryIdFrom","categoryIdTo","actions","selectVocabulary","vocabulary","theme","fontColor","fontColorSecondary","primary","secondary","inputBackground","buttonBorder","importColor","exportColor","categoryBorder","deleteColor","checkBackground","editColor","fontSizeEm","primaryFont","secondaryFont","handleColorType","color","handleWidthType","width","ContainerButton","styled","button","backgroundcolor","darken","ContainerLink","Link","Button","backgroundColor","children","onClick","href","props","to","Container","div","EmptyCategories","vocupracticeSlice","selectedCategoriesId","categoryIdFromSelected","loadVocupractice","setType","setReading","setCategoryId","setSelectedCategoriesId","setWord","selectedCategoryId","setCurrentWordImportant","selectVocupractice","vocupractice","StyledLink","CategoryBlock","onContextMenu","label","Text","span","Input","input","Checkbox","onChange","checked","left","top","List","ul","ListItem","li","ContextMenu","category","onExportClick","WrapperButtons","WrapperCategories","StyledButton","FullCategories","history","useHistory","dispatch","useDispatch","vocabularySelector","useSelector","useState","importantValue","setImportantValue","contextMenuTop","setContextMenuTop","contextMenuLeft","setContextMenuLeft","contextMenuCategory","setContextMenuCategory","useEffect","handleOutsideClick","document","addEventListener","removeEventListener","effect","alert","isAnyCategoryEmpty","Object","keys","forEach","data-tip","e","target","preventDefault","pageX","pageY","handleContextMenuClick","selectedCategory","file","Blob","element","createElement","URL","createObjectURL","download","click","Title","size","PageTitle","WordsLengthContainer","WordsLength","Categories","Helmet","LabelText","ContainerInput","iconType","StyledFontAwesomeIcon","FontAwesomeIcon","forwardRef","ref","onKeyDown","value","labelText","placeholder","restProps","icon","form","AddCategory","onSubmit","categoryName","setCategoryName","CategoryForm","findWordById","AddEditWordForm","wordValue","setWordValue","translationValue","setTranslationValue","readingValue","setReadingValue","InputWordRef","useRef","focus","WordForm","useParams","editData","setEditData","handleSubmit","charAt","toUpperCase","slice","modalSlice","currentCategoryId","active","setModalActiveState","selectModal","modal","useAfterUserType","setQuery","timeOut","setTimeout","clearTimeout","handleFontColorType","fontcolor","fontSize","ButtonIcon","Tr","tr","lighten","Td","td","weight","css","Wrapper","TableRow","onCheckClick","onDeleteClick","onMenuClick","table","Body","tbody","WordsTable","onWordDeleteClick","onWordCheckClick","useMemo","shouldShow","ScrollToTop","shouldShowButton","setShouldShowButton","handleScroll","window","pageYOffset","scrollTo","behavior","DropDownMenu","onImportantClick","onMoveClick","StyledInput","FullWords","onCategoryDeleteclick","containerRef","selectedWords","setSelectedWords","searchValue","setSearchValue","dropDownMenuShow","setDropDownMenuShow","dropdownMenuLeft","setDropdownMenuLeft","dropdownMenuTop","setDropdownMenuTop","dropdownMenuWord","setDropDownMenuWord","searchQuery","useHotkeys","handleAddWordShortcut","handleWordDelete","useCallback","confirm","handleCheckClick","stopPropagation","targetRect","currentTarget","getBoundingClientRect","offsetLeft","offsetTop","scrollY","innerWidth","EmptyWords","Words","handleCategoryDelete","ifEqual","value1","value2","toLocaleLowerCase","Radio","StyledRadio","VocupracticeRadioBtn","text","Word","Reading","isCorrect","column","StyledVocupracticeRadioBtn","Vocupractice","vocupracticeSelector","translationCorrect","setTranslationCorrect","readingCorrect","setReadingCorrect","allCorrect","setAllCorect","readingInputRef","translationInputRef","initNewWord","categoriesId","getState","vocubularyCategories","randomKey","floor","randomCategoryKey","randomCategory","randomWordKey","resetWord","handleTypeChange","key","onDoubleClick","Practice","practiceTitle","setPracticeTitle","Message","NoFound","Logo","isMobile","useMediaQuery","InputFile","StyledButtonIcon","StyledCheckbox","ImportExportBtns","inputFileRef","dontOverrideCheck","setDontOverrideCheck","handleImportClick","handleExportClick","handleDontOverRideCheck","files","reader","FileReader","onload","json","result","importantWordsArray","categoriesKeysToCompare","wordKeysToCompare","categoryKeys","Error","wordKeys","indexOf","splice","error","readAsText","accept","Headbar","SelectInput","select","SelectOption","option","ModalMove","modalSelector","selectValue","setSelectValue","ModalContainer","renderModal","library","add","faEdit","faTrash","faFileExport","faFileImport","faSearch","faArrowUp","faCaretDown","GlobalContainer","App","exact","path","configureStore","reducer","vocabularyReducer","vocupracticeReducer","modalReducer","Boolean","location","hostname","match","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyles","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2b3d3473.chunk.js","sourcesContent":["const generateRandomId = () => {\r\n    return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport default generateRandomId;","export const saveToLocalStorage = (name: string, data: any) => {\r\n    localStorage.setItem(name, JSON.stringify(data));\r\n}\r\n\r\nexport const loadFromLocalStorage = (name: string) => {\r\n    return localStorage.getItem(name) \r\n        ? JSON.parse(localStorage.getItem(name)!)\r\n        : undefined;\r\n}","import { store } from 'react-notifications-component';\r\n\r\ntype notificationType = \"success\" | \"danger\" | \"info\" | \"default\" | \"warning\";\r\n\r\nconst showNotification = (title: string, message: string, type: notificationType) => {\r\n    store.addNotification({\r\n        title: title,\r\n        message: message,\r\n        type: type,\r\n        insert: \"bottom\",\r\n        container: \"bottom-left\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n          duration: 3000,\r\n          onScreen: true\r\n        }\r\n    })   \r\n}\r\n\r\nexport default showNotification;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport generateRandomId from '../../helpers/generateRandomId';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nexport interface Words {\r\n    id: string;\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n    categoryId?: string;\r\n}\r\n\r\nexport interface Categories {\r\n    id: string;\r\n    name: string;\r\n    words: Words[]\r\n}\r\n\r\ninterface VocabularyState {\r\n    categories: {\r\n        [key: string]: Categories\r\n    },\r\n    searchWords: Words[];\r\n}\r\n\r\nexport const initialState: VocabularyState = {\r\n    categories: {},\r\n    searchWords: []\r\n}\r\n\r\nexport const vocabularySlice = createSlice({\r\n    name: 'vocubulary',\r\n    initialState,\r\n    reducers: {\r\n        loadVocabulary: (state, action: PayloadAction<any>) => {\r\n            state.categories = action.payload;\r\n        },\r\n        createCategory: (state, action: PayloadAction<string>) => {\r\n            const randomId = generateRandomId();\r\n            \r\n            state.categories[randomId] = {\r\n                id: randomId,\r\n                name: action.payload,\r\n                words: []\r\n            }\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been created!', 'success');\r\n        },\r\n        createWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n\r\n            state.categories[categoryId].words = [...state.categories[categoryId].words, word];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been added!', 'success');\r\n        },\r\n        deleteCategory: (state, action: PayloadAction<string>) => {\r\n            delete state.categories[action.payload];\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Category has been deleted!', 'success');\r\n        },\r\n        deleteWord: (state, action: PayloadAction<{categoryId: string, wordId: string, notification: boolean}>) => {\r\n            const { categoryId, wordId, notification } = action.payload;\r\n\r\n            state.categories[categoryId].words = state.categories[categoryId].words.filter((item) => {\r\n                return item.id !== wordId;\r\n            });\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            if (notification) {\r\n                showNotification('Success', 'Word has been deleted!', 'success');\r\n            }\r\n            \r\n        },\r\n        updateWord: (state, action: PayloadAction<{categoryId: string, word: Words}>) => {\r\n            const { categoryId, word } = action.payload;\r\n            \r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                return item.id === word.id ? {...item, ...word} : item;\r\n            })\r\n\r\n            state.categories['importantWords'].words = state.categories['importantWords'].words.map((item) => {\r\n                return item.id === word.id ? {...item, ...word} : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been updated!', 'success');\r\n        },\r\n        searchWords: (state, action: PayloadAction<{query: string, categoryId: string}>) => {\r\n            const { categoryId, query } = action.payload;\r\n\r\n            if (query.trim().length === 0) {\r\n                state.searchWords = [];\r\n            } else {\r\n                const foundWords = state.categories[categoryId].words.filter((item) => {\r\n                    return item.word.includes(query) || item.translation.includes(query) || item.reading?.includes(query);\r\n                });\r\n    \r\n                state.searchWords = foundWords;\r\n            }\r\n        },\r\n        setImportant: (state, action: PayloadAction<{categoryId: string, wordId: string, important: boolean}>) => {\r\n            const { categoryId, wordId, important } = action.payload;\r\n\r\n            if (!state.categories['importantWords']) {\r\n                state.categories['importantWords'] = {\r\n                    id: 'importantwords',\r\n                    name: 'important',\r\n                    words: []\r\n                }\r\n            }\r\n            \r\n            state.categories[categoryId].words = state.categories[categoryId].words.map((item) => {\r\n                if (item.id === wordId) {\r\n                    if (important) {\r\n                        const wordWithImportant = {...item, important: important, categoryId: categoryId};\r\n                        state.categories['importantWords'].words.push(wordWithImportant);\r\n                    } else {\r\n                        state.categories['importantWords'].words = state.categories['importantWords'].words.filter((importantItem) => {                    \r\n                            return importantItem.id !== wordId;\r\n                        })\r\n                    }\r\n                }\r\n\r\n                return item.id === wordId ? {...item, important: important} : item;\r\n            })\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n        },\r\n        setImportantSearched: (state, action: PayloadAction<{wordId: string, important: boolean}>) => {\r\n            const { wordId, important } = action.payload;\r\n\r\n            state.searchWords = state.searchWords.map((item) => {\r\n                return item.id === wordId ? {...item, important: important} : item;\r\n            })\r\n        },\r\n        moveWord: (state, action: PayloadAction<{categoryIdFrom: string, categoryIdTo: string, word: Words}>) => {\r\n            const { categoryIdFrom, categoryIdTo, word } = action.payload;\r\n\r\n            state.categories[categoryIdFrom].words = state.categories[categoryIdFrom].words.filter((item) => {\r\n                return item.id !== word.id\r\n            });\r\n\r\n            state.categories[categoryIdTo].words.push(word);\r\n\r\n            saveToLocalStorage('vocupractice', current(state).categories);\r\n\r\n            showNotification('Success', 'Word has been moved!', 'success');\r\n        }\r\n    }\r\n})\r\n\r\nexport const { loadVocabulary, createCategory, createWord, deleteCategory, deleteWord, updateWord, searchWords, setImportant, setImportantSearched, moveWord } = vocabularySlice.actions;\r\n\r\nexport const selectVocabulary = (state: RootState) => state.vocabulary;\r\n\r\nexport default vocabularySlice.reducer;","import { DefaultTheme } from 'styled-components';\r\n\r\nconst theme: DefaultTheme = {\r\n    fontColor: \"#ffffff\",\r\n    fontColorSecondary: \"#999999\",\r\n    primary: \"#232424\",\r\n    secondary: \"#222222\",\r\n    inputBackground: \"#2C2C2C\",\r\n    buttonBorder: \"#000000\",\r\n    importColor: \"#4A7EB5\",\r\n    exportColor: \"#55AA85\",\r\n    categoryBorder: \"#1A1A1A\",\r\n    deleteColor: \"#FF0000\",\r\n    checkBackground: \"#C4C4C4\",\r\n    editColor: \"#52ADA3\",\r\n\r\n    fontSizeEm: '18px',\r\n\r\n    primaryFont: \"Rajdhani\",\r\n    secondaryFont: \"Roboto\"\r\n}\r\n\r\nexport { theme }","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { theme } from '../../theme/theme';\r\nimport { darken } from 'polished';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype backgroundColor = 'import' | 'export' | 'normal' | 'delete';\r\ntype width = 'small' | 'middle' | 'big';\r\n\r\ninterface IButton {\r\n    backgroundColor: backgroundColor;\r\n    width: width;\r\n    children: string;\r\n    href?: string;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    backgroundcolor: backgroundColor;\r\n    width: width;\r\n}\r\n\r\nconst handleColorType = (color: backgroundColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"normal\":\r\n            return theme.secondary;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst handleWidthType = (width: width) => {\r\n    switch(width) {\r\n        case 'small':\r\n            return '20px';\r\n        case 'middle':\r\n            return '40px';\r\n        case 'big':\r\n            return '50px';\r\n        default: return '20px';\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.4em;\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    background: ${({backgroundcolor}) => handleColorType(backgroundcolor)};\r\n    cursor: pointer;\r\n    text-transform: uppercase;\r\n    font-weight: 300;\r\n    height: 45px;\r\n    padding-left: ${({width}) => handleWidthType(width)};\r\n    padding-right: ${({width}) => handleWidthType(width)};\r\n    outline: none;\r\n    transition: background .3s;\r\n    text-decoration: none;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    &:hover {\r\n        background: ${({backgroundcolor}) => darken(\"0.050\", handleColorType(backgroundcolor))}\r\n    }\r\n`\r\n\r\nconst Button = ({backgroundColor, children, width, onClick, href, ...props}: IButton) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink backgroundcolor={backgroundColor} width={width} to={href} {...props}>\r\n                {children}\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton onClick={onClick} backgroundcolor={backgroundColor} width={width} {...props}>\r\n                {children}\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n`\r\n\r\nconst EmptyCategories = () => {\r\n    return (\r\n        <Container>\r\n            <Button href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyCategories;","import { createSlice, PayloadAction, current } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\nimport { saveToLocalStorage, loadFromLocalStorage } from '../../helpers/localStorageHandler';\r\n\r\ninterface VocupracticeState {\r\n    type: string;\r\n    reading: boolean;\r\n    categoryId: string;\r\n    selectedCategoriesId: string[];\r\n    categoryIdFromSelected: string;\r\n    word: Words | null;\r\n}\r\n\r\nconst initialState: VocupracticeState = {\r\n    type: 'translation',\r\n    reading: true,\r\n    categoryId: '',\r\n    selectedCategoriesId: [],\r\n    categoryIdFromSelected: '',\r\n    word: null\r\n}\r\n\r\nexport const vocupracticeSlice = createSlice({\r\n    name: 'vocupractice',\r\n    initialState,\r\n    reducers: {\r\n        loadVocupractice: (state) => {\r\n            const data = loadFromLocalStorage('vocupracticesettings');\r\n\r\n            if (data) {\r\n                state.type = data.type ? data.type : 'translation';\r\n                state.reading = data.reading ? data.reading : false;\r\n            }\r\n        },\r\n        setType: (state, action: PayloadAction<string>) => {\r\n            state.type = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setReading: (state, action: PayloadAction<boolean>) => {\r\n            state.reading = action.payload;\r\n\r\n            saveToLocalStorage('vocupracticesettings', current(state));\r\n        },\r\n        setCategoryId: (state, action: PayloadAction<string>) => {\r\n            state.categoryId = action.payload;\r\n            state.selectedCategoriesId = [];\r\n        },\r\n        setSelectedCategoriesId: (state, action: PayloadAction<string[]>) => {\r\n            state.selectedCategoriesId = action.payload;\r\n            state.categoryId = '';\r\n        },\r\n        setWord: (state, action: PayloadAction<{word: Words | null, selectedCategoryId: string}>) => {\r\n            state.word = action.payload.word;\r\n            state.categoryIdFromSelected = action.payload.selectedCategoryId;\r\n        },\r\n        setCurrentWordImportant: (state, action: PayloadAction<boolean>) => {\r\n            state.word!.important = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const loadRandomWordFromCategory = (category: string): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    if (!vocubularyCategories[category]) {\r\n        return false;\r\n    }\r\n\r\n    const words = vocubularyCategories[category].words;\r\n    const randomKey = Math.floor(Math.random() * words.length);\r\n\r\n    dispatch(setWord({word: words[randomKey], selectedCategoryId: ''}));\r\n}\r\n\r\nexport const loadRandomWordFromMultipleCategories = (categoriesId: string[]): AppThunk => (dispatch, getState) => {\r\n    const vocubularyCategories = getState().vocabulary.categories;\r\n\r\n    let randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n    let randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n\r\n    if (!randomCategory) {\r\n        return false;\r\n    }\r\n\r\n    while (randomCategory.words.length === 0) {\r\n        randomCategoryKey = Math.floor(Math.random() * categoriesId.length);\r\n        randomCategory = vocubularyCategories[categoriesId[randomCategoryKey]];\r\n    }\r\n\r\n    const randomWordKey = Math.floor(Math.random() * randomCategory.words.length);\r\n\r\n    dispatch(setWord({\r\n        word: randomCategory.words[randomWordKey],\r\n        selectedCategoryId: randomCategory.id\r\n    }));\r\n}\r\n\r\nexport const { loadVocupractice, setType, setReading, setSelectedCategoriesId, setCategoryId, setWord, setCurrentWordImportant } = vocupracticeSlice.actions;\r\n\r\nexport const selectVocupractice = (state: RootState) => state.vocupractice;\r\n\r\nexport default vocupracticeSlice.reducer;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { darken } from 'polished';\r\n\r\ninterface ICategoryBlocks {\r\n    name: string;\r\n    href: string;\r\n    onContextMenu: (e: React.MouseEvent<HTMLAnchorElement>) => void;\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    width: 120px;\r\n    height: 120px;\r\n    border: 2px solid ${({theme}) => theme.categoryBorder};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 1.1em;\r\n    display: block;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: background .3s;\r\n    word-break: break-word;\r\n    overflow-wrap: break-word;\r\n    text-align: center;\r\n    padding: 5px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.020, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 825px) {\r\n        margin: auto;\r\n    }\r\n`\r\n\r\nconst CategoryBlock = ({name, href, onContextMenu}: ICategoryBlocks) => {\r\n    return (\r\n        <StyledLink onContextMenu={onContextMenu} to={href}>\r\n            {name}\r\n        </StyledLink>\r\n    );\r\n};\r\n\r\nexport default CategoryBlock;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICheckbox {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    label?: string;\r\n    title?: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n    user-select: none;\r\n` \r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n    text-align: center;\r\n`\r\n\r\nconst Input = styled.input`\r\n    transform: scale(1.7);\r\n`\r\n\r\nconst Checkbox = ({onChange, label, checked, title, ...props}: ICheckbox) => {\r\n    if (label) {       \r\n        return (\r\n            <Container title={title} {...props}>\r\n                <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n                <Text>{label}</Text>\r\n            </Container>\r\n        )\r\n    } else {        \r\n        return (\r\n            <Input checked={checked} onChange={onChange} type=\"checkbox\" />\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\ninterface IContextMenuProps {\r\n    left: number;\r\n    top: number;\r\n    category: string;\r\n    onExportClick: (category: string) => void;\r\n}\r\n\r\ninterface ContainerProps {\r\n    left: number;\r\n    top: number;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 250px;\r\n    background: ${({theme}) => theme.secondary};\r\n    position: absolute;\r\n    left: ${({left}) => left}px;\r\n    top: ${({top}) => top}px;\r\n    box-shadow: 2px 2px 10px 0px #000;\r\n`\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    width: 100%;\r\n`\r\n\r\nconst ListItem = styled.li`\r\n    width: 100%;\r\n    height: 50px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 1.3em;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.02, theme.primary)};\r\n    }\r\n`\r\n\r\nconst ContextMenu = ({left, top, category, onExportClick}: IContextMenuProps) => {\r\n    return (\r\n        <Container left={left} top={top}>\r\n            <List>\r\n                <ListItem>\r\n                    <Button onClick={() => onExportClick(category)}>Export</Button>\r\n                </ListItem>\r\n            </List>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ContextMenu;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport { selectVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { setSelectedCategoriesId, setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport CategoryBlock from '../atoms/CategoryBlock';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport ContextMenu from '../molecules/ContextMenu';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nconst Container = styled.div`\r\n    width: 600px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst WrapperButtons = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    @media (max-width: 600px) {\r\n        flex-direction: column;\r\n        align-items: center\r\n        justify-content: center;\r\n    }\r\n`\r\n\r\nconst WrapperCategories = styled.div`\r\n    width: 90%;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    margin-top: 20px;\r\n    grid-gap: 20px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n\r\n    @media (max-width: 600px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    &:first-of-type {\r\n        margin-left: 0;\r\n    }\r\n\r\n    @media (max-width: 600px) {\r\n        margin: 10px 0px;\r\n    }\r\n\r\n    @media (max-width: 360px) {\r\n        padding: 0;\r\n        width: 200px;\r\n    }\r\n`\r\n\r\nconst FullCategories = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [importantValue, setImportantValue] = useState(false);\r\n    const [contextMenuTop, setContextMenuTop] = useState(0);\r\n    const [contextMenuLeft, setContextMenuLeft] = useState(0);\r\n    const [contextMenuCategory, setContextMenuCategory] = useState('');\r\n\r\n    const handlePracticeAllClick = () => {\r\n        if (importantValue) {\r\n            if (vocabularySelector.categories['importantWords'].words.length === 0) {\r\n                alert(\"You don't have any important words!\");\r\n                return false;\r\n            }\r\n\r\n            dispatch(setCategoryId('importantWords'));\r\n\r\n            history.push('/practice');\r\n        } else {\r\n            let isAnyCategoryEmpty: string[] = [];\r\n            Object.keys(vocabularySelector.categories).forEach((item) => {\r\n                const category = vocabularySelector.categories[item];\r\n    \r\n                if (category.words.length === 0) {\r\n                    isAnyCategoryEmpty.push(category.id);\r\n                    return false;\r\n                } \r\n            })\r\n    \r\n            if (isAnyCategoryEmpty.length === Object.keys(vocabularySelector.categories).length) {\r\n                alert('All your categories are empty!');\r\n                return false;\r\n            }\r\n    \r\n            dispatch(setSelectedCategoriesId(Object.keys(vocabularySelector.categories)));\r\n        \r\n            history.push('/practice');\r\n        }\r\n    }\r\n\r\n    const handleContextMenuClick = (e: React.MouseEvent<HTMLAnchorElement>, category: string) => {\r\n        e.preventDefault();\r\n        setContextMenuCategory(category);\r\n        setContextMenuLeft(e.pageX);\r\n        setContextMenuTop(e.pageY);\r\n    }\r\n\r\n    const handleExportClick = (category: string) => {\r\n        const selectedCategory = {\r\n            [category]: vocabularySelector.categories[category]\r\n        }\r\n        \r\n        const file = new Blob([JSON.stringify(selectedCategory)], {type: 'text/plain'});\r\n        const element = document.createElement('a');\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'vocupractice.txt';\r\n        element.click();\r\n        showNotification('Success', 'Your data has been exported', 'success');\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleOutsideClick = () => {\r\n            if (contextMenuCategory) {\r\n                setContextMenuCategory('');\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', handleOutsideClick)\r\n\r\n        return () => document.removeEventListener('click', handleOutsideClick);\r\n    }, [contextMenuCategory]);\r\n\r\n    return (\r\n        <Container>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <WrapperButtons>\r\n                <StyledButton href=\"/addcategory\" backgroundColor=\"normal\" width=\"small\">Add category</StyledButton>\r\n                <StyledButton onClick={handlePracticeAllClick} backgroundColor=\"normal\" width=\"small\">Practice all</StyledButton>\r\n                <Checkbox data-tip=\"Practice all will only show important words\" checked={importantValue} onChange={(e) => setImportantValue(e.target.checked)} label=\"important\" />\r\n            </WrapperButtons>\r\n            <WrapperCategories>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        if (category.name === 'important') {\r\n                            return null;\r\n                        }\r\n\r\n                        return (\r\n                            <CategoryBlock onContextMenu={(e) => handleContextMenuClick(e, category.id)} key={category.id} href={`/category/${category.id}`} name={category.name} />\r\n                        )\r\n                    })\r\n                }\r\n                {contextMenuCategory && <ContextMenu category={contextMenuCategory} left={contextMenuLeft} top={contextMenuTop} onExportClick={handleExportClick} />}\r\n            </WrapperCategories>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullCategories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype size = 'small' | 'big';\r\n\r\ninterface IPageTitle {\r\n    size: size;\r\n    children: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface TitleProps {\r\n    size: size;\r\n}\r\n\r\nconst Title = styled.span<TitleProps>`\r\n    font-size: ${({size}) => size === 'small' ? '2em' : '3em'};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    padding: 0;\r\n    margin: 0;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n    text-align: center;\r\n    display: block;\r\n`\r\n\r\nconst PageTitle = ({size, children, ...props}: IPageTitle) => {\r\n    return (\r\n        <Title size={size} {...props}>\r\n            {children}\r\n        </Title>\r\n    );\r\n};\r\n\r\nexport default PageTitle;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\ninterface ITitle {\r\n    title?: string;\r\n    length?: number;\r\n}\r\n\r\nconst Container = styled.div`\r\n    padding-bottom: 15px;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    @media (max-width: 1160px) {\r\n        padding-bottom: 20px;\r\n    }\r\n`\r\n\r\nconst WordsLengthContainer = styled.div`\r\n    background: ${({theme}) => darken(0.05, theme.secondary)};\r\n    padding: 0px 5px;\r\n    border-radius: 10px;\r\n    margin-left: 8px;\r\n`\r\n\r\nconst WordsLength = styled.div`\r\n    font-size: 2em;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    user-select: none;\r\n`\r\n\r\nconst Title = ({title, length}: ITitle) => {\r\n    return (\r\n        <Container>\r\n            <PageTitle size=\"small\">{title ? title : `\\u00a0\\u00a0`}</PageTitle>\r\n            { length && \r\n                <WordsLengthContainer>\r\n                    <WordsLength>{length}</WordsLength> \r\n                </WordsLengthContainer>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport EmptyCategories from '../components/organisms/EmptyCategories';\r\nimport FullCategories from '../components/organisms/FullCategories';\r\nimport Title from '../components/molecules/Title';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Categories = () => {\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Vocupractice</title>\r\n            </Helmet>\r\n            <Title />\r\n            {\r\n                Object.keys(vocabularySelector.categories).length > 0 ? <FullCategories /> : <EmptyCategories />\r\n            }\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default Categories;","import React, { forwardRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\ninterface IInput {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n    value: string;\r\n    labelText?: string;\r\n    placeholder?: string;\r\n    iconType?: any;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    label?: string;\r\n}\r\n\r\ninterface InputProps {\r\n    iconType?: string;\r\n}\r\n\r\nconst Container = styled.label<ContainerProps>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.4em;\r\n    width: 280px;\r\n    height: ${({label}) => label ? '82px' : '50px'};\r\n    position: relative;\r\n`\r\n\r\nconst LabelText = styled.span`\r\n    padding-left: 5px;\r\n`\r\n\r\nconst ContainerInput = styled.input<InputProps>`\r\n    background: ${({theme}) => theme.inputBackground};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    border: none;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: ${({iconType}) => iconType ? '0px 60px' : '0px 10px'};\r\n    font-size: 1em;\r\n    outline: none;\r\n    \r\n    &::placeholder {\r\n        color: ${({theme}) => theme.fontColorSecondary};\r\n        font-style: italic;\r\n        font-size: 0.6em;\r\n    }\r\n`\r\n\r\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 12px;\r\n`\r\n\r\nconst Input = forwardRef<HTMLInputElement, IInput>((props, ref) => {\r\n    const { onChange, onKeyDown, value, labelText, placeholder, iconType, ...restProps } = props;\r\n    return (\r\n        <Container label={labelText} {...restProps}>\r\n            { labelText && <LabelText>{labelText}</LabelText> }\r\n            { iconType && <StyledFontAwesomeIcon icon={iconType} /> }\r\n            <ContainerInput iconType={iconType} ref={ref} placeholder={placeholder} value={value} onKeyDown={onKeyDown} onChange={onChange} />\r\n        </Container>\r\n    )\r\n})\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Input from '../atoms/Input';\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IAddCategory {\r\n    onSubmit: (categoryName: string) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 140px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddCategory = ({onSubmit}: IAddCategory) => {\r\n    const [categoryName, setCategoryName] = useState('');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCategoryName(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        \r\n        if (categoryName.trim().length > 0) {\r\n            onSubmit(categoryName);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input labelText=\"Category name\" value={categoryName} onChange={handleInputChange} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">Add category</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddCategory;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, createCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddCategory from '../components/molecules/AddCategory';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst CategoryForm = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n\r\n    const handleSubmit = (categoryName: string) => {\r\n        if (vocabularySelector.categories[categoryName]) {\r\n            alert('Category already exists');\r\n            return false;\r\n        }\r\n\r\n        dispatch(createCategory(categoryName));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Add category - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title=\"Add category\" />\r\n            <AddCategory onSubmit={handleSubmit} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;","import { Categories } from '../features/vocabulary/vocabularySlice';\r\n\r\nconst findWordById = (category: Categories, wordId: string) => {\r\n    if (category.words) {\r\n        return category.words.filter((item) => {\r\n            return item.id === wordId;\r\n        })\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default findWordById;","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IAddEditWordForm {\r\n    type: formType;\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    onSubmit: (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => void;\r\n}\r\n\r\nconst Container = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    height: 325px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst AddEditWordForm = ({type, id, word, translation, reading, onSubmit}: IAddEditWordForm) => {\r\n    const [wordValue, setWordValue] = useState('');\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const InputWordRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (InputWordRef && InputWordRef.current) {\r\n            InputWordRef.current.focus();\r\n        }\r\n    }, [InputWordRef]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            setWordValue(word!);\r\n            setTranslationValue(translation!);\r\n            setReadingValue(reading!);\r\n        }\r\n    }, [id, word, translation, reading]);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (wordValue && translationValue) {\r\n            if (wordValue.trim().length !== 0 && translationValue.trim().length !== 0) {\r\n                onSubmit(e, wordValue, translationValue, readingValue);\r\n            }  \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container onSubmit={handleSubmit}>\r\n            <Input ref={InputWordRef} value={wordValue} labelText=\"Word\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setWordValue(e.target.value)} />\r\n            <Input value={translationValue} labelText=\"Translation\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTranslationValue(e.target.value)} />\r\n            <Input value={readingValue} placeholder=\"Leave empty if not needed\" labelText=\"Reading\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setReadingValue(e.target.value)} />\r\n            <Button backgroundColor=\"normal\" width=\"small\">{`${type} word`}</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AddEditWordForm;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Redirect, useHistory } from 'react-router-dom';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport generateRandomId from '../helpers/generateRandomId';\r\nimport findWordById from '../helpers/findWordById';\r\n\r\nimport { selectVocabulary, createWord, updateWord } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport AddEditWordForm from '../components/organisms/AddEditWordForm';\r\n\r\ntype formType = 'edit' | 'add';\r\n\r\ninterface IWordForm {\r\n    type: formType;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\ninterface editDataInterface {\r\n    id?: string;\r\n    word?: string;\r\n    translation?: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n}\r\n\r\nconst WordForm = ({type}: IWordForm) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { wordId, categoryId } = useParams<{ categoryId: string, wordId: string }>();\r\n    const [ editData, setEditData ] = useState<editDataInterface>({\r\n        id: undefined,\r\n        word: undefined,\r\n        translation: undefined,\r\n        reading: undefined,\r\n        important: undefined,\r\n    })\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>, word: string, translation: string, reading: string | undefined) => {\r\n        if (type === 'add') {\r\n            dispatch(createWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: generateRandomId(),\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading,\r\n                    important: false\r\n                }\r\n            }))\r\n        } else {\r\n            dispatch(updateWord({\r\n                categoryId: categoryId,\r\n                word: {\r\n                    id: editData.id!,\r\n                    word: word,\r\n                    translation: translation,\r\n                    reading: reading,\r\n                    important: editData.important!\r\n                }\r\n            }))\r\n        }\r\n\r\n        history.push(`/category/${categoryId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (type === 'edit' && vocabularySelector.categories[categoryId]) {\r\n            const word = findWordById(vocabularySelector.categories[categoryId], wordId);\r\n\r\n            setEditData(word[0]);\r\n        }\r\n    }, [type, vocabularySelector.categories, wordId, categoryId]);\r\n\r\n    if (type === 'add' && !vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (type === 'edit' && ( !vocabularySelector.categories[categoryId] || findWordById(vocabularySelector.categories[categoryId], wordId).length === 0) ) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{type.charAt(0).toUpperCase() + type.slice(1)} word - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title={`${type.toUpperCase()} word`} />\r\n            {\r\n                type === 'add' ? (\r\n                    <AddEditWordForm onSubmit={handleSubmit} type={type}/>\r\n                ) : (\r\n                    <AddEditWordForm {...editData} onSubmit={handleSubmit} type={type}/>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default WordForm;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\n\r\nimport { Words } from '../vocabulary/vocabularySlice';\r\n\r\ninterface ModalState {\r\n    word: Words | null | undefined,\r\n    active: boolean;\r\n    type: string;\r\n    currentCategoryId: string;\r\n}\r\n\r\nexport const initialState: ModalState = {\r\n    word: null,\r\n    currentCategoryId: '',\r\n    active: false,\r\n    type: ''\r\n}\r\n\r\nexport const modalSlice = createSlice({\r\n    name: 'modal',\r\n    initialState,\r\n    reducers: {\r\n        setModalActiveState: (state, action: PayloadAction<{active: boolean, type: string, currentCategoryId: string}>) => {\r\n            const { active, type, currentCategoryId } = action.payload;\r\n            state.active = active;\r\n            state.type = type;\r\n            state.currentCategoryId = currentCategoryId;\r\n        },\r\n        setWord: (state, action: PayloadAction<Words | null | undefined>) => {\r\n            state.word = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setModalActiveState, setWord } = modalSlice.actions;\r\n\r\nexport const selectModal = (state: RootState) => state.modal;\r\n\r\nexport default modalSlice.reducer;","import { useState, useEffect } from 'react';\r\n\r\nconst useAfterUserType = (value: string) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    useEffect(() => {\r\n        const timeOut = setTimeout(() => {\r\n            setQuery(value);\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeOut);\r\n    }, [value]);\r\n\r\n    return query;\r\n}\r\n\r\nexport default useAfterUserType;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Link } from 'react-router-dom';\r\nimport { theme } from '../../theme/theme';\r\n\r\ntype fontColor = 'edit' | 'delete' | 'export' | 'import' | 'white' | 'normal';\r\n\r\ninterface IButtonIcon {\r\n    fontColor: fontColor;\r\n    iconType: any;\r\n    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    href?: string;\r\n    fontSize?: string;\r\n    [key: string]: any;\r\n}\r\n\r\ninterface ContainerProps {\r\n    fontcolor: fontColor;\r\n    fontSize?: string;\r\n}\r\n\r\nconst handleFontColorType = (color: fontColor) => {\r\n    switch(color) {\r\n        case \"import\":\r\n            return theme.importColor;\r\n        case \"export\":\r\n            return theme.exportColor;\r\n        case \"edit\":\r\n            return theme.editColor;\r\n        case \"delete\":\r\n            return theme.deleteColor;\r\n        case \"white\":\r\n            return theme.fontColor;\r\n        case \"normal\":\r\n            return theme.fontColorSecondary;\r\n        default: return theme.secondary;\r\n    }\r\n}\r\n\r\nconst ContainerButton = styled.button<ContainerProps>`\r\n    color: ${({fontcolor}) => handleFontColorType(fontcolor)};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ContainerLink = styled(Link)<ContainerProps>`\r\n    color: ${({theme, fontcolor}) => fontcolor === 'edit' ? theme.editColor : theme.deleteColor};\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: ${({fontSize}) => fontSize ? fontSize : '1em'};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    outline: none;\r\n    width: 25px;\r\n    height: 25px;\r\n`\r\n\r\nconst ButtonIcon = ({fontColor, iconType, onClick, href, fontSize, ...props}: IButtonIcon) => {\r\n    if (href) {\r\n        return (\r\n            <ContainerLink fontSize={fontSize} to={href} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerLink>\r\n        )\r\n    } else {\r\n        return (\r\n            <ContainerButton fontSize={fontSize} onClick={onClick} fontcolor={fontColor} {...props}>\r\n                <FontAwesomeIcon icon={iconType} />\r\n            </ContainerButton>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ButtonIcon;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { lighten } from 'polished';\r\n\r\nimport Checkbox from './Checkbox';\r\nimport ButtonIcon from './ButtonIcon';\r\n\r\ninterface ITableRow {\r\n    word: string;\r\n    translation: string;\r\n    reading?: string;\r\n    important?: boolean;\r\n    onCheckClick: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onDeleteClick: () => void;\r\n    onMenuClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    wordId: string;\r\n    categoryId: string;\r\n}\r\n\r\ninterface TableDataProps {\r\n    weight?: number;\r\n    important?: boolean;\r\n}\r\n\r\nconst Tr = styled.tr`\r\n    height: 60px;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        aling-items: center;\r\n        margin: 10px 0px;\r\n        height: auto;\r\n        background: ${({theme}) => lighten(0.05, theme.primary)};\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\nconst Td = styled.td<TableDataProps>`\r\n    font-weight: ${({weight}) => weight ? weight : '300'};\r\n\r\n    &:first-child {\r\n        padding-left: 20px;\r\n    }\r\n\r\n    @media (max-width: 717px) {\r\n        text-align: center;\r\n        \r\n        &:first-child {\r\n            padding-left: 0;\r\n        }\r\n    }\r\n\r\n    ${({important}) => important && css`\r\n        color: red;\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n`\r\n\r\nconst TableRow = ({word, translation, reading, important, onCheckClick, onDeleteClick, onMenuClick, wordId, categoryId}: ITableRow) => {\r\n    return (\r\n        <Tr>\r\n            <Td important={important} weight={600}>\r\n                {word}\r\n            </Td>\r\n            <Td important={important}>\r\n                {translation}\r\n            </Td>\r\n            <Td important={important}>\r\n                {\r\n                    reading ? reading : '\\u00a0\\u00a0'\r\n                }\r\n            </Td>\r\n            <Td>\r\n                <Wrapper>\r\n                    <ButtonIcon data-tip=\"edit word\" href={`/category/${categoryId}/edit/${wordId}`} iconType=\"edit\" fontColor=\"edit\" />\r\n                    <Checkbox onChange={onCheckClick} />\r\n                    <ButtonIcon data-tip=\"remove word\" onClick={onDeleteClick} iconType=\"trash\" fontColor=\"delete\" />\r\n                    <ButtonIcon onClick={onMenuClick} iconType=\"caret-down\" fontColor=\"normal\" />\r\n                </Wrapper>\r\n            </Td>\r\n        </Tr>\r\n    );\r\n};\r\n\r\nexport default TableRow;","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\nimport TableRow from '../atoms/TableRow';\r\n\r\ninterface IWordsTable {\r\n    words: Words[];\r\n    categoryId: string;\r\n    onWordDeleteClick: (wordId: string) => void;\r\n    onWordCheckClick: (wordId: string, checked: boolean) => void;\r\n    onMenuClick: (e: React.MouseEvent<HTMLButtonElement>, word: Words) => void;\r\n}\r\n\r\nconst Container = styled.table`\r\n    width: 100%;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    font-size: 1.2em;\r\n    border-collapse: collapse;\r\n`\r\n\r\nconst Body = styled.tbody``\r\n\r\nconst WordsTable = ({words, categoryId, onWordDeleteClick, onWordCheckClick, onMenuClick}: IWordsTable) => {\r\n    return useMemo(() => {\r\n        return (\r\n            <Container>\r\n                <Body>\r\n                    {\r\n                        words.map((item) => {\r\n                            return (\r\n                                <TableRow key={item.id} important={item.important} categoryId={categoryId} wordId={item.id} word={item.word} translation={item.translation} reading={item.reading} onMenuClick={(e) => onMenuClick(e, item)} onCheckClick={(e) => onWordCheckClick(item.id, e.target.checked)} onDeleteClick={() => onWordDeleteClick(item.id)} />\r\n                            )\r\n                        })\r\n                    }\r\n                </Body>\r\n            </Container>\r\n        );\r\n    }, [words, categoryId, onWordCheckClick, onWordDeleteClick, onMenuClick]);\r\n\r\n};\r\n\r\nexport default WordsTable;","import React, { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\n\r\ninterface ContainerProps {\r\n    shouldShow: boolean;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 50px;\r\n    height: 50px;\r\n    position: fixed;\r\n    right: 20%;\r\n    bottom: 60px;\r\n    opacity: 0;\r\n    visibility: 0;\r\n    z-index: 99;\r\n    transition: opacity .3s ease-in-out, background .3s;\r\n    background: ${({theme}) => theme.secondary};\r\n    border: 1px solid ${({theme}) => theme.buttonBorder};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n\r\n    ${({shouldShow}) => shouldShow && css`\r\n        opacity: 1;\r\n        visibility: 1;\r\n    `}\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(\"0.050\", theme.secondary)};\r\n    }\r\n\r\n    @media (max-width: 1750px) {\r\n        right: 60px;\r\n    }\r\n`\r\n\r\nconst ScrollToTop = () => {\r\n    const [shouldShowButton, setShouldShowButton] = useState(false);\r\n\r\n    const handleScroll = () => {\r\n        if (window.pageYOffset >= 600) {\r\n            setShouldShowButton(true);\r\n        } else {\r\n            setShouldShowButton(false);\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', handleScroll);\r\n\r\n        return () => document.removeEventListener('scroll', handleScroll);\r\n    }, [])\r\n\r\n    return (\r\n        <Container onClick={handleClick} shouldShow={shouldShowButton}>\r\n            <ButtonIcon fontSize=\"1.8em\" iconType=\"arrow-up\" fontColor=\"white\" />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ScrollToTop;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { darken } from 'polished';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\n\r\ninterface IDropDownMenuProps {\r\n    left: number;\r\n    top: number;\r\n    word: Words | undefined;\r\n    onImportantClick: (wordId: string) => void;\r\n    onMoveClick: (word: Words | undefined) => void;\r\n}\r\n\r\ninterface ContainerProps {\r\n    left: number;\r\n    top: number;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 250px;\r\n    background: ${({theme}) => theme.secondary};\r\n    position: absolute;\r\n    left: ${({left}) => left}px;\r\n    top: ${({top}) => top}px;\r\n    box-shadow: 2px 2px 10px 0px #000;\r\n`\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    width: 100%;\r\n`\r\n\r\nconst ListItem = styled.li`\r\n    width: 100%;\r\n    height: 50px;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 1.3em;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover {\r\n        background: ${({theme}) => darken(0.02, theme.primary)};\r\n    }\r\n`\r\n\r\nconst DropDownMenu = ({left, top, word, onImportantClick, onMoveClick}: IDropDownMenuProps) => {\r\n    return (\r\n        <Container left={left} top={top}>\r\n            <List>\r\n                <ListItem>\r\n                    <Button onClick={() => onImportantClick(word!.id)}>{word!.important ? \"Not important\" : \"Important\" }</Button>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button onClick={() => onMoveClick(word)}>Move</Button>\r\n                </ListItem>\r\n            </List>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DropDownMenu;","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport { Words } from '../../features/vocabulary/vocabularySlice';\r\nimport { setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport useAfterUserType from '../../hooks/useAfterUserType';\r\n\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport { selectVocabulary, deleteWord, searchWords, setImportant, setImportantSearched } from '../../features/vocabulary/vocabularySlice';\r\nimport { setCategoryId } from '../../features/vocupractice/vocupracticeSlice';\r\n\r\nimport Button from '../atoms/Button';\r\nimport WordsTable from '../molecules/WordsTable';\r\nimport Input from '../atoms/Input';\r\nimport ScrollToTop from '../molecules/ScrollToTop';\r\nimport DropDownMenu from '../molecules/DropDownMenu';\r\n\r\ninterface IFullWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    margin-bottom: auto;\r\n    width: 900px;\r\n    position: relative;\r\n\r\n    @media (max-width: 930px) {\r\n        width: 90%;\r\n    }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width: 930px) {\r\n        display: grid;\r\n        grid-template-columns: repeat(2, 1fr);\r\n        grid-gap: 20px;\r\n    }\r\n\r\n    @media (max-width: 430px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    @media (max-width: 717px) {\r\n        font-size: 1em;\r\n    }\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst FullWords = ({categoryId, onCategoryDeleteclick}: IFullWords) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const containerRef = useRef<HTMLDivElement>(null)\r\n    const [selectedWords, setSelectedWords] = useState<{[key: string]: boolean}>({});\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [dropDownMenuShow, setDropDownMenuShow] = useState(false);\r\n    const [dropdownMenuLeft, setDropdownMenuLeft] = useState(0);\r\n    const [dropdownMenuTop, setDropdownMenuTop] = useState(0);\r\n    const [dropdownMenuWord, setDropDownMenuWord] = useState<Words>();\r\n    \r\n    const searchQuery = useAfterUserType(searchValue);\r\n\r\n    useHotkeys('ctrl+a', (e) => handleAddWordShortcut(e));\r\n\r\n    const handleAddWordShortcut = (e: KeyboardEvent) => {\r\n        e.preventDefault();\r\n        history.push(`/category/${categoryId}/add`);\r\n    }\r\n\r\n    const handleWordDelete = useCallback((wordId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this word?')) {\r\n            dispatch(deleteWord({\r\n                categoryId: categoryId,\r\n                wordId: wordId,\r\n                notification: true\r\n            }))\r\n        }\r\n    }, [categoryId, dispatch]);\r\n\r\n    const handleCheckClick = useCallback((wordId: string, checked: boolean) => {\r\n        setSelectedWords({...selectedWords, [wordId]: checked});\r\n    }, [selectedWords]);\r\n\r\n    const handleDeleteSelected = () => {\r\n        if (window.confirm('Are you sure you want to delete all selected words?')) {\r\n            Object.keys(selectedWords).map((id) => {\r\n                const isChecked = selectedWords[id];\r\n\r\n                if (!isChecked) {\r\n                    return false;\r\n                }\r\n\r\n                return dispatch(deleteWord({\r\n                    categoryId: categoryId,\r\n                    wordId: id,\r\n                    notification: false\r\n                }))\r\n            })\r\n\r\n            showNotification('Success!', 'Selected words has been deleted!', 'success');\r\n        }\r\n    }\r\n\r\n    const handleMenuClick = (e: React.MouseEvent<HTMLButtonElement>, word: Words) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const targetRect = e.currentTarget.getBoundingClientRect();\r\n\r\n        if (containerRef && containerRef.current) {\r\n            let left = targetRect.left - containerRef.current.offsetLeft;\r\n            let top = targetRect.top - containerRef.current.offsetTop + window.scrollY;\r\n\r\n            if (left + 250 >= window.innerWidth - 250) {\r\n                left -= 220;\r\n            }\r\n\r\n            setDropdownMenuLeft(left);\r\n            setDropdownMenuTop(top);\r\n            setDropDownMenuWord(word);\r\n            setDropDownMenuShow(true);\r\n        }\r\n    }\r\n\r\n    const handleImportantClick = (wordId: string) => {\r\n        dispatch(setImportant({\r\n            categoryId: categoryId,\r\n            wordId: wordId,\r\n            important: dropdownMenuWord!.important ? false : true\r\n        }))\r\n\r\n        if (vocabularySelector.searchWords.length !== 0) {\r\n            dispatch(setImportantSearched({\r\n                wordId: wordId,\r\n                important: dropdownMenuWord!.important ? false : true\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleMoveClick = (word: Words | undefined) => {\r\n        dispatch(setWord(word));\r\n        dispatch(setModalActiveState({\r\n            active: true,\r\n            type: 'move',\r\n            currentCategoryId: categoryId\r\n        }))\r\n    }\r\n\r\n    const handlePracticeClick = () => {\r\n        dispatch(setCategoryId(categoryId));\r\n\r\n        history.push('/practice');\r\n    }\r\n\r\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const handleOutsideClick = () => {\r\n            if (dropDownMenuShow) {\r\n                setDropDownMenuShow(false);\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', handleOutsideClick)\r\n\r\n        return () => document.removeEventListener('click', handleOutsideClick);\r\n    }, [dropDownMenuShow]);\r\n\r\n    useEffect(() => {\r\n        dispatch(searchWords({query: searchQuery, categoryId}))\r\n    }, [searchQuery, categoryId, dispatch]);\r\n\r\n    if (!vocabularySelector.categories[categoryId]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container ref={containerRef}>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <ScrollToTop />\r\n            <Wrapper>\r\n                <StyledButton onClick={handlePracticeClick} backgroundColor=\"normal\" width=\"small\">Practice</StyledButton>\r\n                <StyledButton data-tip=\"(ctrl + a)\" href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n                <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n                <StyledButton onClick={handleDeleteSelected} backgroundColor=\"delete\" width=\"small\">Delete selected</StyledButton>\r\n            </Wrapper>\r\n            <StyledInput iconType=\"search\" onChange={handleSearchChange} value={searchValue} />\r\n            <WordsTable categoryId={categoryId} onMenuClick={handleMenuClick} onWordCheckClick={handleCheckClick} onWordDeleteClick={handleWordDelete} words={vocabularySelector.searchWords.length === 0 ? vocabularySelector.categories[categoryId].words : vocabularySelector.searchWords} />\r\n            {dropDownMenuShow && <DropDownMenu onMoveClick={handleMoveClick} onImportantClick={handleImportantClick} word={dropdownMenuWord} left={dropdownMenuLeft} top={dropdownMenuTop} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default FullWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\ninterface IEmptyWords {\r\n    categoryId: string;\r\n    onCategoryDeleteclick: (categoryId: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: auto;\r\n    margin-top: auto;\r\n\r\n    @media (max-width: 825px) {\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 10px;\r\n\r\n    @media (max-width: 825px) {\r\n        margin: 10px 0px;\r\n    }    \r\n`\r\n\r\nconst EmptyWords = ({categoryId, onCategoryDeleteclick}: IEmptyWords) => {\r\n    return (\r\n        <Container>\r\n            <StyledButton href={`/category/${categoryId}/add`} backgroundColor=\"normal\" width=\"small\">Add word</StyledButton>\r\n            <StyledButton onClick={() => onCategoryDeleteclick(categoryId)} backgroundColor=\"delete\" width=\"small\">Delete category</StyledButton>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EmptyWords;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport { selectVocabulary, deleteCategory } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport FullWords from '../components/organisms/FullWords'\r\nimport EmptyWords from '../components/organisms/EmptyWords';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Words = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const handleCategoryDelete = (categoryId: string) => {\r\n        if (window.confirm('Are you sure you want to delete this category?')) {\r\n            dispatch(deleteCategory(categoryId));\r\n        }\r\n    }\r\n\r\n    if (!vocabularySelector.categories[id]) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>{vocabularySelector.categories[id].name.charAt(0).toUpperCase() + vocabularySelector.categories[id].name.slice(1)} - Vocupractice</title>\r\n            </Helmet>\r\n            <Title length={vocabularySelector.categories[id].words.length && vocabularySelector.categories[id].words.length} title={`Category / ${vocabularySelector.categories[id].name}`} />\r\n            {\r\n                vocabularySelector.categories[id].words.length > 0 ? <FullWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} /> : <EmptyWords onCategoryDeleteclick={handleCategoryDelete} categoryId={id} />\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Words;","const ifEqual = (value1: string, value2: string) => {\r\n    if (value1.toLocaleLowerCase() === value2.toLocaleLowerCase()) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default ifEqual;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IRadio {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.input`\r\n    transform: scale(1.1);\r\n    margin: 0;\r\n`\r\n\r\nconst Radio = ({onChange, name, checked, ...props}: IRadio) => {\r\n    return (\r\n        <Container checked={checked} type=\"radio\" name={name} onChange={onChange} {...props} />\r\n    );\r\n};\r\n\r\nexport default Radio;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Radio from '../atoms/Radio';\r\n\r\ninterface IVocupracticeRadioBtn {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    text: string;\r\n    checked?: boolean;\r\n    [key: string]: any;\r\n}\r\n\r\nconst Container = styled.label`\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    text-transform: uppercase;\r\n    font-size: 1.1em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledRadio = styled(Radio)`\r\n    position: relative;\r\n    bottom: 1px;\r\n`\r\n\r\nconst Text = styled.span`\r\n    margin-left: 5px;\r\n`\r\n\r\nconst VocupracticeRadioBtn = ({onChange, name, checked, text, ...props}: IVocupracticeRadioBtn) => {\r\n    return (\r\n        <Container {...props}>\r\n            <StyledRadio checked={checked} onChange={onChange} name={name} />\r\n            <Text>{text}</Text>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default VocupracticeRadioBtn;","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport { selectVocupractice, loadVocupractice, setType, setReading, loadRandomWordFromCategory, loadRandomWordFromMultipleCategories, setWord, setCurrentWordImportant } from '../../features/vocupractice/vocupracticeSlice';\r\nimport { selectVocabulary, setImportant } from '../../features/vocabulary/vocabularySlice';\r\n\r\nimport ifEqual from '../../helpers/ifEqual';\r\n\r\nimport Button from '../atoms/Button';\r\nimport Input from '../atoms/Input';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport VocupracticeRadioBtn from '../molecules/VocupracticeRadioBtn';\r\n\r\ninterface WrapperProps {\r\n    column?: boolean;\r\n}\r\n\r\ninterface InputProps {\r\n    isCorrect: boolean;\r\n}\r\n\r\ninterface WordProps {\r\n    important: boolean | undefined;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: auto;\r\n    margin-bottom: auto;\r\n    align-items: center;\r\n`\r\n\r\nconst Word = styled.button<WordProps>`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    font-size: 3em;\r\n    text-align: center;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    ${({important}) => important ? (\r\n            css`\r\n                color: red;\r\n            `\r\n        ) : (\r\n            css`\r\n                color: ${({theme}) => theme.fontColor};\r\n            `\r\n        )\r\n    }\r\n`\r\n\r\nconst Reading = styled.span`\r\n    font-family: ${({theme}) => theme.secondaryFont};\r\n    color: ${({theme}) => theme.fontColorSecondary};\r\n    font-size: 1.1em;\r\n    text-align: center;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nconst StyledInput = styled(Input)<InputProps>`\r\n    margin: 5px 0px;\r\n    \r\n    & > input {\r\n        transition: background .3s ease-in-out;\r\n    }\r\n\r\n    ${({isCorrect}) => isCorrect && css`\r\n        & > input {\r\n            background: #33F633;\r\n            pointer-events: none;\r\n        }\r\n    `}\r\n`\r\n\r\nconst Wrapper = styled.div<WrapperProps>`\r\n    display: flex;\r\n    margin: 5px 0px;\r\n\r\n    ${({column}) => column && css`\r\n        flex-direction: column;\r\n    `}\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    font-size: 0.7em;\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledVocupracticeRadioBtn = styled(VocupracticeRadioBtn)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst Vocupractice = () => {\r\n    const dispatch = useDispatch();\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [translationValue, setTranslationValue] = useState('');\r\n    const [readingValue, setReadingValue] = useState('');\r\n    const [translationCorrect, setTranslationCorrect] = useState('');\r\n    const [readingCorrect, setReadingCorrect] = useState('');\r\n    const [allCorrect, setAllCorect] = useState(false);\r\n\r\n    const readingInputRef = useRef<HTMLInputElement>(null);\r\n    const translationInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const initNewWord = useCallback(() => {\r\n        if (vocupracticeSelector.categoryId !== '') {\r\n            dispatch(loadRandomWordFromCategory(vocupracticeSelector.categoryId));\r\n        } else {\r\n            dispatch(loadRandomWordFromMultipleCategories(vocupracticeSelector.selectedCategoriesId));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId]);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadVocupractice());\r\n\r\n        initNewWord();\r\n\r\n        return () => {\r\n            dispatch(setWord({word: null, selectedCategoryId: ''}));\r\n        }\r\n    }, [dispatch, vocupracticeSelector.categoryId, vocupracticeSelector.selectedCategoriesId, initNewWord])\r\n\r\n    useEffect(() => {\r\n        if (translationCorrect === 'true' && readingCorrect === 'true') {\r\n            setAllCorect(true);\r\n        }\r\n    }, [translationCorrect, readingCorrect])\r\n\r\n    const handleTranslationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (translationCorrect !== 'true') {\r\n            setTranslationValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleReadingChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (readingCorrect !== 'true') {\r\n            setReadingValue(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleTranslationCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && (e.key === 'Enter' || e.key === 'Tab')) {\r\n            if (!vocupracticeSelector.word.reading) {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                    setTranslationCorrect('true');\r\n\r\n                    if (vocupracticeSelector.type !== 'both') {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (vocupracticeSelector.type === 'both' && e.key !== 'Tab') {\r\n                readingInputRef.current && readingInputRef.current.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReadingCheck = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (vocupracticeSelector.word && e.key === 'Enter') {\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                    setReadingCorrect('true');\r\n\r\n                    if (translationCorrect !== 'true') {\r\n                        if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                            setTranslationCorrect('true');\r\n                        }\r\n                    }\r\n\r\n                    if (vocupracticeSelector.type === 'reading') {\r\n                        setTranslationCorrect('true');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCheckClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            if (ifEqual(translationValue, vocupracticeSelector.word.translation)) {\r\n                setTranslationCorrect('true');\r\n            }\r\n\r\n            if (vocupracticeSelector.word.reading) {\r\n                if (vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') {\r\n                    if (ifEqual(readingValue, vocupracticeSelector.word.reading)) {\r\n                        setReadingCorrect('true');\r\n                    }\r\n                } else {\r\n                    setReadingCorrect('true');\r\n                }\r\n            } else {\r\n                setReadingCorrect('true');\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleImportantClick = () => {\r\n        dispatch(setImportant({\r\n            categoryId: vocupracticeSelector.word?.categoryId ? vocupracticeSelector.word.categoryId : vocupracticeSelector.categoryIdFromSelected ? vocupracticeSelector.categoryIdFromSelected : vocupracticeSelector.categoryId, \r\n            important: vocupracticeSelector.word!.important ? !vocupracticeSelector.word!.important : true,\r\n            wordId: vocupracticeSelector.word!.id\r\n        }))\r\n        dispatch(setCurrentWordImportant(vocupracticeSelector.word!.important ? !vocupracticeSelector.word!.important : true))\r\n    }\r\n\r\n    const resetWord = () => {\r\n        setTranslationValue('');\r\n        setReadingValue('');\r\n        setTranslationCorrect('');\r\n        setReadingCorrect('');\r\n        setAllCorect(false);\r\n    }\r\n\r\n    const handleNextClick = () => {\r\n        resetWord();\r\n\r\n        initNewWord();\r\n    }\r\n\r\n    const handleAnswerClick = () => {\r\n        if (vocupracticeSelector.word) {\r\n            setTranslationValue(vocupracticeSelector.word.translation);\r\n            setReadingValue(vocupracticeSelector.word.reading ? vocupracticeSelector.word.reading : '');\r\n            setTranslationCorrect('true');\r\n            setReadingCorrect('true');\r\n        }\r\n    }\r\n\r\n    const handleVocupracticeKeyEnter = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter' && allCorrect) {\r\n            resetWord();\r\n\r\n            initNewWord();\r\n\r\n            translationInputRef.current!.focus();\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type: string) => {\r\n        dispatch(setType(type));\r\n\r\n        resetWord();\r\n    }\r\n\r\n    const handleReadingCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setReading(e.target.checked));\r\n    }\r\n\r\n    if (vocupracticeSelector.categoryId === '' && vocupracticeSelector.selectedCategoriesId.length === 0) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (!vocupracticeSelector.word) {\r\n        if (vocupracticeSelector.categoryId === 'importantWords' && vocabularySelector.categories['importantWords'].words.length === 0) {\r\n            return <Redirect to=\"/\" />\r\n        } else {\r\n            return (\r\n                <Container />\r\n            )\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Container onKeyDown={handleVocupracticeKeyEnter}>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <Word onDoubleClick={handleImportantClick} data-tip={vocupracticeSelector.word.important ? 'Click twice to make this word normal' : 'Click twice to make this word important'} important={vocupracticeSelector.word.important} >{vocupracticeSelector.word.word}</Word>\r\n            {vocupracticeSelector.reading && vocupracticeSelector.word.reading && <Reading>{`(${vocupracticeSelector.word.reading})`}</Reading>}\r\n            {(vocupracticeSelector.type === 'translation' || vocupracticeSelector.type === 'both') ? <StyledInput isCorrect={translationCorrect === 'true' ? true : false} ref={translationInputRef} placeholder=\"Translation\" onKeyDown={handleTranslationCheck} onChange={handleTranslationChange} value={translationValue} /> : ''}\r\n            {(vocupracticeSelector.word.reading && ( vocupracticeSelector.type === 'reading' || vocupracticeSelector.type === 'both') ) ? <StyledInput isCorrect={readingCorrect === 'true' ? true : false} ref={readingInputRef} placeholder=\"Reading\" onKeyDown={handleReadingCheck} onChange={handleReadingChange} value={readingValue} /> : ''}\r\n            <Wrapper>\r\n                <StyledButton onClick={handleAnswerClick} backgroundColor=\"normal\" width=\"small\">Answer</StyledButton>\r\n                <StyledButton onClick={handleNextClick} backgroundColor=\"normal\" width=\"small\">Next</StyledButton>\r\n                <StyledButton onClick={handleCheckClick} backgroundColor=\"normal\" width=\"small\">Check</StyledButton>\r\n            </Wrapper>\r\n            {\r\n                vocupracticeSelector.word.reading && (\r\n                    <Wrapper column>\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'translation'} text=\"translation\" name=\"type\" onChange={() => handleTypeChange('translation')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'reading'} text=\"reading\" name=\"type\" onChange={() => handleTypeChange('reading')} />\r\n                        <StyledVocupracticeRadioBtn checked={vocupracticeSelector.type === 'both'} text=\"both\" name=\"type\" onChange={() => handleTypeChange('both')} />\r\n                    </Wrapper>\r\n                )\r\n            }\r\n            {vocupracticeSelector.word.reading && <Checkbox checked={vocupracticeSelector.reading} label=\"show reading\" onChange={handleReadingCheckbox} />}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Vocupractice;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectVocupractice } from '../features/vocupractice/vocupracticeSlice';\r\nimport { selectVocabulary } from '../features/vocabulary/vocabularySlice';\r\n\r\nimport Title from '../components/molecules/Title';\r\nimport Vocupractice from '../components/organisms/Vocupractice';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n    padding-top: 30px;\r\n`\r\n\r\nconst Practice = () => {\r\n    const vocupracticeSelector = useSelector(selectVocupractice);\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const [practiceTitle, setPracticeTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (vocupracticeSelector.categoryId) {\r\n            setPracticeTitle(`/ ${vocabularySelector.categories[vocupracticeSelector.categoryId].name}`);\r\n        } else {\r\n            setPracticeTitle('');\r\n        }\r\n\r\n        return () => setPracticeTitle('');\r\n    }, [vocupracticeSelector.categoryId, vocabularySelector.categories]);\r\n\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>Practice - Vocupractice</title>\r\n            </Helmet>\r\n            <Title title={`Practice ${practiceTitle}`}/>\r\n            <Vocupractice />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Practice;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    flex: 1;\r\n`\r\n\r\nconst Message = styled.span`\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 3em;\r\n    user-select: none;\r\n`\r\n\r\nconst NoFound = () => {\r\n    return (\r\n        <Container>\r\n            <Helmet>\r\n                <title>404 - Vocupractice</title>\r\n            </Helmet>\r\n            <Message>Hey! It looks like you're lost!</Message>\r\n            <Message>Click on vocupractice logo to go back :)</Message>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default NoFound;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport PageTitle from '../atoms/PageTitle';\r\n\r\nconst Container = styled.div`\r\n    margin-right: auto;\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n`\r\n\r\nconst Logo = () => {\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 645px)'\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <StyledLink to=\"/\">\r\n                <PageTitle size={isMobile ? 'small' : 'big'}>Vocupractice</PageTitle>\r\n            </StyledLink>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { selectVocabulary, loadVocabulary } from '../../features/vocabulary/vocabularySlice';\r\nimport { saveToLocalStorage } from '../../helpers/localStorageHandler';\r\nimport showNotification from '../../helpers/showNotification';\r\n\r\nimport Button from '../atoms/Button';\r\nimport ButtonIcon from '../atoms/ButtonIcon';\r\nimport Checkbox from '../atoms/Checkbox';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`\r\n\r\nconst InputFile = styled.input`\r\n    display: none;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n`\r\n\r\nconst StyledButtonIcon = styled(ButtonIcon)`\r\n    margin: 0px 10px;\r\n`\r\n\r\nconst StyledCheckbox = styled(Checkbox)`\r\n    @media (max-width: 540px) {\r\n        position: absolute;\r\n        top: 50px;\r\n        font-size: 1em;\r\n        right: 10px;\r\n    }\r\n`\r\n\r\n\r\nconst ImportExportBtns = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const isMobile = useMediaQuery({\r\n        query: '(max-width: 950px)'\r\n    });\r\n    const inputFileRef = useRef<HTMLInputElement>(null);\r\n    const [dontOverrideCheck, setDontOverrideCheck] = useState(false); \r\n\r\n    const handleImportClick = () => {\r\n        if (inputFileRef.current) {\r\n            inputFileRef.current.click();\r\n        }\r\n    }\r\n\r\n    const handleExportClick = () => {\r\n        const file = new Blob([JSON.stringify(vocabularySelector.categories)], {type: 'text/plain'});\r\n        const element = document.createElement('a');\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'vocupractice.txt';\r\n        element.click();\r\n        showNotification('Success', 'Your data has been exported', 'success');\r\n    }\r\n\r\n    const handleFileImport = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const file = e.target.files[0];\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                if (e.target) {\r\n                    try {\r\n                        let json = JSON.parse(e.target.result as string);\r\n                        const importantWordsArray: any[] = [];\r\n\r\n                        const categoriesKeysToCompare = ['id', 'name', 'words'];\r\n                        const wordKeysToCompare = ['id', 'word', 'translation', 'reading'];\r\n\r\n                        Object.keys(json).forEach((item) => {\r\n                            const category = json[item];\r\n                            const categoryKeys = Object.keys(category);\r\n\r\n                            if (JSON.stringify(categoryKeys) !== JSON.stringify(categoriesKeysToCompare)) {\r\n                                throw Error('Not vocupractice file');\r\n                            }\r\n\r\n                            Object.keys(category.words).forEach((item) => {\r\n                                const word = category.words[item];\r\n                                const wordKeys = Object.keys(word);\r\n\r\n                                if (wordKeys.indexOf('important') !== -1) {\r\n                                    if (word.important === true && word.categoryId) {\r\n                                        word.important === true && importantWordsArray.push(word);\r\n                                    }\r\n\r\n                                    wordKeys.splice(wordKeys.indexOf('important', 1));\r\n                                }\r\n\r\n                                if (JSON.stringify(wordKeys) !== JSON.stringify(wordKeysToCompare)) {\r\n                                    throw Error('Not vocupractice file');\r\n                                }\r\n                            })\r\n                        })\r\n\r\n                        json['importantWords'] = {\r\n                            id: 'importantwords',\r\n                            name: 'important',\r\n                            words: importantWordsArray\r\n                        }\r\n\r\n                        if (dontOverrideCheck) {\r\n                            json = {...json, ...vocabularySelector.categories}\r\n                        }\r\n\r\n                        dispatch(loadVocabulary(json));\r\n                        saveToLocalStorage('vocupractice', json);\r\n                        showNotification('Success', 'Data has been imported!', 'success');\r\n                    } catch (error) {\r\n                        showNotification('Error', 'This is not a valid vocupractice file!', 'danger');\r\n                        inputFileRef.current!.value = '';\r\n                    }\r\n                }\r\n            }\r\n            file && reader.readAsText(file);\r\n        }\r\n    }\r\n\r\n    const handleDontOverRideCheck = () => {\r\n        setDontOverrideCheck(!dontOverrideCheck);\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputFile onChange={handleFileImport} ref={inputFileRef} type=\"file\" accept=\".txt\" />\r\n            {\r\n                isMobile ? (\r\n                    <>\r\n                        <StyledCheckbox checked={dontOverrideCheck} onChange={handleDontOverRideCheck} label=\"Don't overwrite\" />\r\n                        <StyledButtonIcon data-tip=\"import\" fontSize=\"1.5em\" fontColor=\"import\" iconType=\"file-import\" onClick={handleImportClick}/>\r\n                        <StyledButtonIcon data-tip=\"export\" fontSize=\"1.5em\" fontColor=\"export\" iconType=\"file-export\" onClick={handleExportClick}/>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <StyledCheckbox checked={dontOverrideCheck} onChange={handleDontOverRideCheck} label=\"Don't overwrite\" />\r\n                        <StyledButton backgroundColor=\"import\" width=\"big\" onClick={handleImportClick}>Import</StyledButton>\r\n                        <StyledButton backgroundColor=\"export\" width=\"big\" onClick={handleExportClick}>Export</StyledButton>\r\n                    </>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ImportExportBtns;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport Logo from '../molecules/Logo';\r\nimport ImportExportBtsn from '../molecules/ImportExportBtns';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n\r\n    @media (max-width: 470px) {\r\n        padding: 10px 10px;\r\n    }\r\n`\r\n\r\nconst Headbar = () => {\r\n    return (\r\n        <Container>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <Logo />\r\n            <ImportExportBtsn />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Headbar;","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectVocabulary, moveWord } from '../../features/vocabulary/vocabularySlice';\r\nimport { selectModal, setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport Button from '../atoms/Button';\r\n\r\nconst Container = styled.div`\r\n    width: 600px;\r\n    height: 250px;\r\n    background: ${({theme}) => theme.primary};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    box-shadow: 5px 5px 20px 0px #000;\r\n`\r\n\r\nconst Title = styled.span`\r\n    font-family: ${({theme}) => theme.primaryFont};\r\n    color: ${({theme}) => theme.fontColor};\r\n    font-size: 1.6em;\r\n    text-transform: uppercase;\r\n    user-select: none;\r\n`\r\n\r\nconst SelectInput = styled.select`\r\n    width: 60%;\r\n    height: 40px;\r\n    margin-top: 10px;\r\n`\r\n\r\nconst SelectOption = styled.option``\r\n\r\nconst Wrapper = styled.div`\r\n    margin-top: 30px;\r\n`\r\n\r\nconst StyledButton = styled(Button)`\r\n    margin: 0px 5px;\r\n    font-size: 1.2em;\r\n`\r\n\r\nconst ModalMove = () => {\r\n    const dispatch = useDispatch();\r\n    const vocabularySelector = useSelector(selectVocabulary);\r\n    const modalSelector = useSelector(selectModal);\r\n    const [selectValue, setSelectValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        setSelectValue(modalSelector.currentCategoryId);\r\n    }, [modalSelector.currentCategoryId]);\r\n\r\n    const handleSelectchange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelectValue(e.target.value);\r\n    }\r\n\r\n    const handleMoveClick = () => {\r\n        dispatch(moveWord({\r\n            categoryIdFrom: modalSelector.currentCategoryId,\r\n            categoryIdTo: selectValue,\r\n            word: modalSelector.word!\r\n        }));\r\n        dispatch(setWord(null));\r\n        dispatch(setModalActiveState({\r\n            active: false,\r\n            type: '',\r\n            currentCategoryId: ''\r\n        }));\r\n    }\r\n\r\n\r\n    const handleCloseClick = () => {\r\n        dispatch(setWord(null));\r\n        dispatch(setModalActiveState({\r\n            active: false,\r\n            type: '',\r\n            currentCategoryId: ''\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Select category</Title>\r\n            <SelectInput value={selectValue} onChange={handleSelectchange}>\r\n                {\r\n                    Object.keys(vocabularySelector.categories).map((item) => {\r\n                        const category = vocabularySelector.categories[item];\r\n\r\n                        if (category.name === 'important') return false;\r\n\r\n                        return (\r\n                            <SelectOption value={category.id} key={category.id}>{category.name}</SelectOption>\r\n                        )\r\n                    })\r\n                }\r\n            </SelectInput>\r\n            <Wrapper>\r\n                <StyledButton onClick={handleMoveClick} backgroundColor=\"normal\" width=\"small\">Move</StyledButton>\r\n                <StyledButton onClick={handleCloseClick} backgroundColor=\"normal\" width=\"small\">Close</StyledButton>\r\n            </Wrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ModalMove;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectModal, setModalActiveState, setWord } from '../../features/modal/modalSlice';\r\n\r\nimport ModalMove from '../molecules/ModalMove';\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background: rgba(0,0,0,0.3);\r\n    z-index: 9999;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst ModalContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const modalSelector = useSelector(selectModal);\r\n\r\n    const renderModal = (type: string) => {\r\n        switch(modalSelector.type) {\r\n            case 'move':\r\n                return <ModalMove />\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n    const handleOutsideClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        const target = e.target as HTMLDivElement;\r\n\r\n        if (target.id === 'modal-outside') {\r\n            dispatch(setModalActiveState({\r\n                active: false,\r\n                currentCategoryId: '',\r\n                type: ''\r\n            }));\r\n            dispatch(setWord(null));\r\n        }\r\n    }\r\n\r\n    if (!modalSelector.active) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Container id=\"modal-outside\" onClick={handleOutsideClick}>\r\n            {\r\n                renderModal(modalSelector.type)\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ModalContainer;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faEdit, faTrash, faFileImport, faFileExport, faSearch, faArrowUp, faCaretDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { useDispatch } from 'react-redux';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\n\r\nimport { loadVocabulary } from './features/vocabulary/vocabularySlice';\r\n\r\nimport { loadFromLocalStorage } from './helpers/localStorageHandler';\r\n\r\nimport Categories from './pages/Categories';\r\nimport CategoryForm from './pages/CategoryForm';\r\nimport WordForm from './pages/WordForm';\r\nimport Words from './pages/Words';\r\nimport Practice from './pages/Practice';\r\nimport NoFound from './pages/NoFound';\r\nimport Headbar from './components/organisms/Headbar';\r\nimport ModalContainer from './components/organisms/ModalContainer';\r\n\r\nlibrary.add(faEdit, faTrash, faFileExport, faFileImport, faSearch, faArrowUp, faCaretDown);\r\n\r\nconst GlobalContainer = styled.div`\r\n\twidth: 100%;\r\n\tmin-height: 100vh;\r\n\tfont-size: ${({theme}) => theme.fontSizeEm};\r\n\tbackground: ${({theme}) => theme.primary};\r\n\tpadding: 50px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst data = loadFromLocalStorage('vocupractice');\r\n\r\n\t\tif (data) {\r\n\t\t\tdispatch(loadVocabulary(data));\r\n\t\t}\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ReactNotification />\r\n\t\t\t<GlobalContainer>\r\n\t\t\t\t<Headbar />\r\n\t\t\t\t<ModalContainer />\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t<Categories />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"/addcategory\">\r\n\t\t\t\t\t\t<CategoryForm />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/add\">\r\n\t\t\t\t\t\t<WordForm type=\"add\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:categoryId/edit/:wordId\">\r\n\t\t\t\t\t\t<WordForm type=\"edit\" />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/category/:id\">\r\n\t\t\t\t\t\t<Words />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route exact path=\"/practice\">\r\n\t\t\t\t\t\t<Practice />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route path=\"*\">\r\n\t\t\t\t\t\t<NoFound />\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</GlobalContainer>\r\n\t\t</>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport vocabularyReducer from '../features/vocabulary/vocabularySlice';\r\nimport vocupracticeReducer from '../features/vocupractice/vocupracticeSlice';\r\nimport modalReducer from '../features/modal/modalSlice';\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tvocabulary: vocabularyReducer,\r\n\t\tvocupractice: vocupracticeReducer,\r\n\t\tmodal: modalReducer\r\n\t},\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n\tReturnType,\r\n\tRootState,\r\n\tunknown,\r\n\tAction<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n    \r\n    code {\r\n        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n        monospace;\r\n    }\r\n\r\n    *,\r\n    *::after,\r\n    *::before {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6,\r\n    p,\r\n    ol,\r\n    ul {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { theme } from './theme/theme';\r\nimport GlobalStyles from './theme/GlobalStyles';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n    \t<Provider store={store}>\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t\t<GlobalStyles />\r\n\t\t\t\t<HashRouter>\r\n      \t\t\t\t<App />\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</ThemeProvider>\r\n    \t</Provider>\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}